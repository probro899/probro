{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/Form.js\";\nimport React from 'react';\nimport { FormGroup } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions';\nimport { keyToLabel } from '../config';\nimport Input from './Input';\nimport Button from './Button';\nimport FileInput from './FileInput';\n\nvar Element = function Element(props) {\n  var label = props.label,\n      type = props.type,\n      value = props.value,\n      schema = props.schema,\n      form = props.form;\n\n  switch (type) {\n    case 'input':\n      return React.createElement(Input, Object.assign({\n        label_: keyToLabel[label],\n        value: value,\n        schema: schema\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }));\n\n    case 'button':\n      return React.createElement(Button, Object.assign({\n        text: label,\n        form: form,\n        schema: schema\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }));\n\n    case 'fileInput':\n      return React.createElement(FileInput, Object.assign({\n        label_: keyToLabel[label],\n        value: value,\n        schema: schema\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }));\n\n    default:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"error\");\n  }\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          schema = _this$props.schema;\n      var formKeys = Object.keys(data);\n      var dataKeys = formKeys.filter(function (obj) {\n        return obj !== 'success' && obj !== 'loading' && obj !== 'error' ? obj : null;\n      }); // const dataValues = Object.values(data);\n\n      return React.createElement(FormGroup, {\n        helperText: \"Please fill the above form to update the details.\",\n        labelFor: \"text-input\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, dataKeys.map(function (obj, idx) {\n        var type = 'input'; // obj === 'profilePicture' ? 'fileInput' : 'input';\n\n        return React.createElement(Element, Object.assign({\n          key: idx,\n          label: obj,\n          type: type,\n          schema: schema,\n          value: obj\n        }, _this2.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }));\n      }), React.createElement(Element, Object.assign({\n        label: \"Submit\",\n        type: \"button\",\n        schema: schema\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nForm.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps, _objectSpread({}, actions))(Form);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/Form.js"],"names":["React","FormGroup","connect","PropTypes","actions","keyToLabel","Input","Button","FileInput","Element","props","label","type","value","schema","form","Form","state","data","formKeys","Object","keys","dataKeys","filter","obj","map","idx","Component","propTypes","objectOf","any","isRequired","string","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormGroup } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions';\nimport { keyToLabel } from '../config';\nimport Input from './Input';\nimport Button from './Button';\nimport FileInput from './FileInput';\n\nconst Element = (props) => {\n  const {\n    label,\n    type,\n    value,\n    schema,\n    form,\n  } = props;\n  switch (type) {\n    case 'input':\n      return (<Input label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n    case 'button':\n      return (<Button text={label} form={form} schema={schema} {...props} />);\n    case 'fileInput':\n      return (<FileInput label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n    default:\n      return (<div>error</div>);\n  }\n};\n\nclass Form extends React.Component {\n  state = {}\n\n  render() {\n    const { data, schema } = this.props;\n    const formKeys = Object.keys(data);\n    const dataKeys = formKeys.filter((obj) => {\n      return (\n        (obj !== 'success' && obj !== 'loading' && obj !== 'error') ? obj : null\n      );\n    });\n    // const dataValues = Object.values(data);\n    return (\n      <FormGroup\n        helperText=\"Please fill the above form to update the details.\"\n        labelFor=\"text-input\"\n        labelInfo=\"(required)\"\n      >\n        {\n          dataKeys.map((obj, idx) => {\n            const type = 'input';\n            // obj === 'profilePicture' ? 'fileInput' : 'input';\n            return (\n              <Element key={idx} label={obj} type={type} schema={schema} value={obj} {...this.props} />\n            );\n          })\n        }\n        <Element label=\"Submit\" type=\"button\" schema={schema} {...this.props} />\n      </FormGroup>\n    );\n  }\n}\n\nForm.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => state;\nexport default connect(mapStateToProps, { ...actions })(Form);\n"]},"metadata":{},"sourceType":"module"}