{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/Form.js\";\nimport React from 'react';\nimport { FormGroup } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions';\nimport { keyToLabel } from '../config';\nimport Input from './Input';\nimport Button from './Button';\nimport FileInput from './FileInput';\n\nvar Element = function Element(props) {\n  var data = props.data;\n\n  if (!data.fieldType) {\n    return null;\n  }\n\n  switch (data.fieldType) {\n    case 'input':\n      return React.createElement(Input, Object.assign({}, data, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }));\n\n    case 'button':\n      return React.createElement(Button, Object.assign({}, data, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }));\n\n    default:\n      return null;\n  } // const {\n  //   label,\n  //   type,\n  //   value,\n  //   schema,\n  //   form,\n  // } = props;\n  // switch (type) {\n  //   case 'input':\n  //     return (<Input label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n  //   case 'button':\n  //     return (<Button text={label} form={form} schema={schema} {...props} />);\n  //   case 'fileInput':\n  //     return (<FileInput label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n  //   default:\n  //     return (<div>error</div>);\n  // }\n\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.onChange = function () {\n      return _this.setState({\n        hello: 'wow'\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.props.data; // const { data, schema } = this.props;\n      // const formKeys = Object.keys(data);\n      // const dataKeys = formKeys.filter((obj) => {\n      //   return (\n      //     (obj !== 'success' && obj !== 'loading' && obj !== 'error') ? obj : null\n      //   );\n      // });\n      // const dataValues = Object.values(data);\n\n      return React.createElement(FormGroup, {\n        helperText: \"Please fill the details\",\n        labelFor: \"text-input\",\n        labelInfo: \"(required)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, data.map(function (obj, idx) {\n        return React.createElement(Element, {\n          key: idx,\n          data: obj,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nForm.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps, _objectSpread({}, actions))(Form);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/Form.js"],"names":["React","FormGroup","connect","PropTypes","actions","keyToLabel","Input","Button","FileInput","Element","props","data","fieldType","Form","state","onChange","setState","hello","map","obj","idx","Component","propTypes","objectOf","any","isRequired","schema","string","mapStateToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,MACjBC,IADiB,GACRD,KADQ,CACjBC,IADiB;;AAEzB,MAAI,CAACA,IAAI,CAACC,SAAV,EAAqB;AACnB,WAAO,IAAP;AACD;;AACD,UAAQD,IAAI,CAACC,SAAb;AACE,SAAK,OAAL;AACE,aAAQ,oBAAC,KAAD,oBAAWD,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AACF,SAAK,QAAL;AACE,aAAQ,oBAAC,MAAD,oBAAYA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AACF;AACE,aAAO,IAAP;AANJ,GALyB,CAazB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,CA9BD;;IAgCME,I;;;;;;;;;;;;;;;;;UACJC,K,GAAQ,E;;UAERC,Q,GAAW,YAAM;AACf,aAAO,MAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAP;AACD,K;;;;;;;6BAEQ;AAAA,UACCN,IADD,GACU,KAAKD,KADf,CACCC,IADD,EAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aACE,oBAAC,SAAD;AACE,QAAA,UAAU,EAAC,yBADb;AAEE,QAAA,QAAQ,EAAC,YAFX;AAGE,QAAA,SAAS,EAAC,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMIA,IAAI,CAACO,GAAL,CAAS,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAc,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAEA,GAAd;AAAmB,UAAA,IAAI,EAAED,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;AAAA,OAAT,CANJ,CADF;AAqBD;;;;EAtCgBnB,KAAK,CAACqB,S;;AAyCzBR,IAAI,CAACS,SAAL,GAAiB;AACfX,EAAAA,IAAI,EAAER,SAAS,CAACoB,QAAV,CAAmBpB,SAAS,CAACqB,GAA7B,EAAkCC,UADzB;AAEfC,EAAAA,MAAM,EAAEvB,SAAS,CAACwB,MAAV,CAAiBF;AAFV,CAAjB;;AAKA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAd,KAAK;AAAA,SAAIA,KAAJ;AAAA,CAA7B;;AACA,eAAeZ,OAAO,CAAC0B,eAAD,oBAAuBxB,OAAvB,EAAP,CAAyCS,IAAzC,CAAf","sourcesContent":["import React from 'react';\nimport { FormGroup } from '@blueprintjs/core';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions';\nimport { keyToLabel } from '../config';\nimport Input from './Input';\nimport Button from './Button';\nimport FileInput from './FileInput';\n\nconst Element = (props) => {\n  const { data } = props;\n  if (!data.fieldType) {\n    return null;\n  }\n  switch (data.fieldType) {\n    case 'input':\n      return (<Input {...data} />);\n    case 'button':\n      return (<Button {...data} />);\n    default:\n      return null;\n  }\n  // const {\n  //   label,\n  //   type,\n  //   value,\n  //   schema,\n  //   form,\n  // } = props;\n  // switch (type) {\n  //   case 'input':\n  //     return (<Input label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n  //   case 'button':\n  //     return (<Button text={label} form={form} schema={schema} {...props} />);\n  //   case 'fileInput':\n  //     return (<FileInput label_={keyToLabel[label]} value={value} schema={schema} {...props} />);\n  //   default:\n  //     return (<div>error</div>);\n  // }\n};\n\nclass Form extends React.Component {\n  state = {}\n\n  onChange = () => {\n    return this.setState({ hello: 'wow' });\n  }\n\n  render() {\n    const { data } = this.props;\n    // const { data, schema } = this.props;\n    // const formKeys = Object.keys(data);\n    // const dataKeys = formKeys.filter((obj) => {\n    //   return (\n    //     (obj !== 'success' && obj !== 'loading' && obj !== 'error') ? obj : null\n    //   );\n    // });\n    // const dataValues = Object.values(data);\n    return (\n      <FormGroup\n        helperText=\"Please fill the details\"\n        labelFor=\"text-input\"\n        labelInfo=\"(required)\"\n      >\n        {\n          data.map((obj, idx) => <Element key={idx} data={obj} />)\n        }\n        {/* {\n          dataKeys.map((obj, idx) => {\n            const type = 'input';\n            // obj === 'profilePicture' ? 'fileInput' : 'input';\n            return (\n              <Element key={idx} label={obj} type={type} schema={schema} value={obj} {...this.props} />\n            );\n          })\n        } */}\n        {/* <Element label=\"Submit\" type=\"button\" schema={schema} {...this.props} /> */}\n      </FormGroup>\n    );\n  }\n}\n\nForm.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => state;\nexport default connect(mapStateToProps, { ...actions })(Form);\n"]},"metadata":{},"sourceType":"module"}