{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\n\nvar TaskOverlay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskOverlay, _Component);\n\n  function TaskOverlay() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskOverlay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      editHead: false,\n      editDesc: false\n    };\n\n    _this.onClose = function () {\n      var _this$props = _this.props,\n          _class = _this$props._class,\n          updateClassValue = _this$props.updateClassValue;\n      updateClassValue('overLayContent', _objectSpread({}, _class.overLayContent, {\n        isOpen: false\n      }));\n    };\n\n    _this.toggleElem = function () {\n      var _this$state = _this.state,\n          editHead = _this$state.editHead,\n          editDesc = _this$state.editDesc;\n\n      _this.setState({\n        editHead: !editHead,\n        editDesc: !editDesc\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TaskOverlay, [{\n    key: \"render\",\n    value: function render() {\n      var _class = this.props._class;\n      var _class$overLayContent = _class.overLayContent,\n          isOpen = _class$overLayContent.isOpen,\n          taskTitle = _class$overLayContent.taskTitle,\n          taskDescription = _class$overLayContent.taskDescription;\n      var _this$state2 = this.state,\n          editHead = _this$state2.editHead,\n          editDesc = _this$state2.editDesc;\n      return React.createElement(Dialog, {\n        isOpen: isOpen,\n        onClose: this.onClose,\n        className: \"overlay-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"task-detail-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"overlay-title\",\n        onDoubleClick: this.toggleElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, editHead ? React.createElement(TextArea, {\n        value: taskTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, taskTitle), React.createElement(Button, {\n        icon: \"edit\",\n        small: true,\n        className: \"edit-button\",\n        intent: Intent.SUCCESS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"overlay-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Description\")), React.createElement(\"div\", {\n        className: \"desc\",\n        onDoubleClick: this.toggleElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, editDesc ? React.createElement(TextArea, {\n        value: taskDescription,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, taskDescription)))));\n    }\n  }]);\n\n  return TaskOverlay;\n}(Component);\n\nTaskOverlay.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownprops) {\n  return _objectSpread({}, state, ownprops);\n};\n\nexport default connect(mapStateToProps, _objectSpread({}, actions))(TaskOverlay);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js"],"names":["React","Component","connect","Dialog","Button","TextArea","Intent","PropTypes","actions","TaskOverlay","state","editHead","editDesc","onClose","props","_class","updateClassValue","overLayContent","isOpen","toggleElem","setState","taskTitle","taskDescription","SUCCESS","propTypes","objectOf","any","isRequired","func","mapStateToProps","ownprops"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\n\nclass TaskOverlay extends Component {\n  state = {\n    editHead: false,\n    editDesc: false,\n  };\n\n  onClose = () => {\n    const { _class, updateClassValue } = this.props;\n    updateClassValue('overLayContent', { ..._class.overLayContent, isOpen: false });\n  };\n\n  toggleElem = () => {\n    const { editHead, editDesc } = this.state;\n    this.setState({ editHead: !editHead, editDesc: !editDesc });\n  };\n\n  render() {\n    const { _class } = this.props;\n    const { isOpen, taskTitle, taskDescription } = _class.overLayContent;\n    const { editHead, editDesc } = this.state;\n    return (\n      <Dialog\n        isOpen={isOpen}\n        onClose={this.onClose}\n        className=\"overlay-container\"\n      >\n        <div className=\"task-detail-overlay\">\n          <div className=\"overlay-title\" onDoubleClick={this.toggleElem}>\n            {editHead ? <TextArea value={taskTitle} />\n              : (\n                <div className=\"head\">\n                  <span>\n                    {taskTitle}\n                  </span>\n                  <Button icon=\"edit\" small className=\"edit-button\" intent={Intent.SUCCESS} />\n                </div>\n              )\n            }\n          </div>\n          <div className=\"overlay-description\">\n            <h4><u>Description</u></h4>\n            <div className=\"desc\" onDoubleClick={this.toggleElem}>\n              {editDesc ? <TextArea value={taskDescription} /> : <span>{taskDescription}</span>}\n            </div>\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nTaskOverlay.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state, ownprops) => ({ ...state, ...ownprops });\nexport default connect(mapStateToProps, { ...actions })(TaskOverlay);\n"]},"metadata":{},"sourceType":"module"}