{"ast":null,"code":"import _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport { timeStampSorting } from '../../screens/users/utility-functions';\n\nvar profileIcon = require('../../assets/imageUploadIcon.png');\n\nvar TaskOverlay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskOverlay, _Component);\n\n  function TaskOverlay() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskOverlay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      editHead: false,\n      editDesc: false,\n      commentText: '',\n      task: {},\n      comments: [],\n      description: ''\n    };\n\n    _this.onClose = function () {\n      var _this$props = _this.props,\n          onClose = _this$props.onClose,\n          taskId = _this$props.taskId;\n      onClose(taskId);\n\n      _this.setState({\n        editHead: false,\n        editDesc: false,\n        commentText: ''\n      });\n    };\n\n    _this.toggleElemTitle = function () {\n      var editHead = _this.state.editHead;\n      var _this$props2 = _this.props,\n          _class = _this$props2._class,\n          updateClassValue = _this$props2.updateClassValue;\n\n      if (editHead && _class.overLayContent.taskTitle !== '') {\n        var newTasks = _objectSpread({}, _class.tasks);\n\n        newTasks[_class.overLayContent.taskId] = {\n          id: _class.overLayContent.taskId,\n          title: _class.overLayContent.taskTitle,\n          description: _class.overLayContent.taskDescription,\n          comments: _class.overLayContent.comments\n        };\n        updateClassValue('tasks', _objectSpread({}, newTasks));\n      }\n\n      _this.setState({\n        editHead: !editHead\n      });\n    };\n\n    _this.toggleElemDesc = function () {\n      var editDesc = _this.state.editDesc;\n      var _this$props3 = _this.props,\n          _class = _this$props3._class,\n          updateClassValue = _this$props3.updateClassValue;\n\n      if (editDesc && _class.overLayContent.taskTitle !== '') {\n        var newTasks = _objectSpread({}, _class.tasks);\n\n        newTasks[_class.overLayContent.taskId] = {\n          id: _class.overLayContent.taskId,\n          title: _class.overLayContent.taskTitle,\n          description: _class.overLayContent.taskDescription,\n          comments: _class.overLayContent.comments\n        };\n        updateClassValue('tasks', _objectSpread({}, newTasks));\n      }\n\n      _this.setState({\n        editDesc: !editDesc\n      });\n    };\n\n    _this.titleChange = function (e) {\n      var _this$props4 = _this.props,\n          _class = _this$props4._class,\n          updateClassValue = _this$props4.updateClassValue;\n      var _class$overLayContent = _class.overLayContent,\n          isOpen = _class$overLayContent.isOpen,\n          taskId = _class$overLayContent.taskId,\n          taskDescription = _class$overLayContent.taskDescription,\n          comments = _class$overLayContent.comments;\n      updateClassValue('overLayContent', {\n        isOpen: isOpen,\n        taskId: taskId,\n        taskTitle: e.target.value,\n        taskDescription: taskDescription,\n        comments: comments\n      });\n    };\n\n    _this.descChange = function (e) {\n      var _this$props5 = _this.props,\n          _class = _this$props5._class,\n          updateClassValue = _this$props5.updateClassValue;\n      var _class$overLayContent2 = _class.overLayContent,\n          isOpen = _class$overLayContent2.isOpen,\n          taskId = _class$overLayContent2.taskId,\n          taskTitle = _class$overLayContent2.taskTitle,\n          comments = _class$overLayContent2.comments;\n      updateClassValue('overLayContent', {\n        isOpen: isOpen,\n        taskId: taskId,\n        taskTitle: taskTitle,\n        taskDescription: e.target.value,\n        comments: comments\n      });\n    };\n\n    _this.putComment = function (e) {\n      _this.setState({\n        commentText: e.target.value\n      });\n    };\n\n    _this.submitComment = function () {\n      var commentText = _this.state.commentText;\n\n      if (commentText !== '') {\n        var _this$props6 = _this.props,\n            _class = _this$props6._class,\n            main = _this$props6.main,\n            updateClassValue = _this$props6.updateClassValue;\n        var _class$overLayContent3 = _class.overLayContent,\n            isOpen = _class$overLayContent3.isOpen,\n            taskId = _class$overLayContent3.taskId,\n            taskTitle = _class$overLayContent3.taskTitle,\n            taskDescription = _class$overLayContent3.taskDescription,\n            comments = _class$overLayContent3.comments;\n        var newComment = [{\n          commentId: Math.random().toString(36).substring(7),\n          user: {\n            userId: main.user.id,\n            userName: \"\".concat(main.user.firstName, \" \").concat(main.user.middleName, \" \").concat(main.user.lastName),\n            profilePic: 'www.google.com'\n          },\n          text: commentText,\n          timestamp: Date.now()\n        }].concat(_toConsumableArray(comments));\n        updateClassValue('overLayContent', {\n          isOpen: isOpen,\n          taskId: taskId,\n          taskTitle: taskTitle,\n          taskDescription: taskDescription,\n          comments: newComment\n        });\n        updateClassValue('tasks', _objectSpread({}, _class.tasks, _defineProperty({}, taskId, _objectSpread({}, _class.tasks[taskId], {\n          comments: newComment\n        }))));\n\n        _this.setState({\n          commentText: ''\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TaskOverlay, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var taskId = nextProps.taskId,\n          tasks = nextProps.tasks,\n          comments = nextProps.comments,\n          attachments = nextProps.attachments,\n          descriptions = nextProps.descriptions;\n      var commentsCard = Object.values(comments.byId).filter(function (obj) {\n        if (taskId === obj.boardColumnCardId) {\n          return obj;\n        }\n      });\n      var attachmentsCard = Object.values(comments.byId).filter(function (obj) {\n        if (taskId === obj.boardColumnCardId) {\n          return obj;\n        }\n      }); // finding the latest description\n\n      var latestDesription = Object.values(descriptions.byId).sort(timeStampSorting)[0];\n      tasks.map(function (obj) {\n        if (obj.id === taskId) {\n          _this2.setState({\n            comments: commentsCard,\n            attachments: attachmentsCard,\n            task: obj,\n            description: latestDesription\n          });\n        }\n      });\n    } // on overlay close\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props7 = this.props,\n          isOpen = _this$props7.isOpen,\n          taskId = _this$props7.taskId,\n          tasks = _this$props7.tasks,\n          _class = _this$props7._class;\n      var _class$overLayContent4 = _class.overLayContent,\n          taskTitle = _class$overLayContent4.taskTitle,\n          taskDescription = _class$overLayContent4.taskDescription,\n          comments = _class$overLayContent4.comments;\n      var _this$state = this.state,\n          editHead = _this$state.editHead,\n          editDesc = _this$state.editDesc,\n          commentText = _this$state.commentText,\n          task = _this$state.task;\n      return React.createElement(Dialog, {\n        isOpen: isOpen,\n        onClose: this.onClose,\n        className: \"overlay-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"task-detail-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"overlay-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, editHead ? React.createElement(TextArea, {\n        value: task.name,\n        onChange: function onChange(e) {\n          return _this3.titleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, task.name)), editHead ? React.createElement(Button, {\n        text: \"Save\",\n        onClick: this.toggleElemTitle,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }) : React.createElement(Button, {\n        text: \"Edit\",\n        onClick: this.toggleElemTitle,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(Button, {\n        icon: \"cross\",\n        style: {\n          float: 'right'\n        },\n        minimal: true,\n        onClick: this.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"overlay-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"desc-head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Description\"), editDesc ? React.createElement(Button, {\n        text: \"Save\",\n        onClick: this.toggleElemDesc,\n        small: true,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }) : React.createElement(Button, {\n        text: \"Edit\",\n        onClick: this.toggleElemDesc,\n        small: true,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"desc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, editDesc ? React.createElement(TextArea, {\n        value: task.description,\n        onChange: this.descChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, task.description))), React.createElement(\"div\", {\n        className: \"comment-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        fill: true,\n        placeholder: \"Put your comments.\",\n        value: commentText,\n        onChange: function onChange(e) {\n          return _this3.putComment(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(Button, {\n        style: {\n          marginLeft: '5px'\n        },\n        text: \"Submit\",\n        intent: Intent.PRIMARY,\n        onClick: this.submitComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"comments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"History\"), comments.map(function (comment) {\n        return React.createElement(\"div\", {\n          className: \"s-comment\",\n          key: comment.commentId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: profileIcon,\n          height: \"45px\",\n          alt: \"profile or blank profile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"com-con\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"com-auth\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: '16px',\n            fontWeight: 'bold',\n            padding: '3px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, comment.user.userName), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }, comment.timestamp)), React.createElement(\"div\", {\n          className: \"com-desc\",\n          style: {\n            padding: '3px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, comment.text)));\n      }))), React.createElement(\"div\", {\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"Hello\")));\n    }\n  }]);\n\n  return TaskOverlay;\n}(Component);\n\nTaskOverlay.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  taskId: PropTypes.number.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.any).isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps)(TaskOverlay);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js"],"names":["React","Component","connect","Dialog","Button","TextArea","Intent","PropTypes","timeStampSorting","profileIcon","require","TaskOverlay","state","editHead","editDesc","commentText","task","comments","description","onClose","props","taskId","setState","toggleElemTitle","_class","updateClassValue","overLayContent","taskTitle","newTasks","tasks","id","title","taskDescription","toggleElemDesc","titleChange","e","isOpen","target","value","descChange","putComment","submitComment","main","newComment","commentId","Math","random","toString","substring","user","userId","userName","firstName","middleName","lastName","profilePic","text","timestamp","Date","now","nextProps","attachments","descriptions","commentsCard","Object","values","byId","filter","obj","boardColumnCardId","attachmentsCard","latestDesription","sort","map","name","float","marginLeft","PRIMARY","comment","fontSize","fontWeight","padding","propTypes","func","isRequired","bool","number","arrayOf","any","mapStateToProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,MAAnC,QAAiD,mBAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,uCAAjC;;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAAC,kCAAD,CAA3B;;IAEMC,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,IAAI,EAAE,EAJA;AAKNC,MAAAA,QAAQ,EAAE,EALJ;AAMNC,MAAAA,WAAW,EAAE;AANP,K;;UA0CRC,O,GAAU,YAAM;AAAA,wBACc,MAAKC,KADnB;AAAA,UACND,OADM,eACNA,OADM;AAAA,UACGE,MADH,eACGA,MADH;AAEdF,MAAAA,OAAO,CAACE,MAAD,CAAP;;AACA,YAAKC,QAAL,CAAc;AACZT,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,QAAQ,EAAE,KAFE;AAGZC,QAAAA,WAAW,EAAE;AAHD,OAAd;AAKD,K;;UAGDQ,e,GAAkB,YAAM;AAAA,UACdV,QADc,GACD,MAAKD,KADJ,CACdC,QADc;AAAA,yBAEe,MAAKO,KAFpB;AAAA,UAEdI,MAFc,gBAEdA,MAFc;AAAA,UAENC,gBAFM,gBAENA,gBAFM;;AAGtB,UAAIZ,QAAQ,IAAIW,MAAM,CAACE,cAAP,CAAsBC,SAAtB,KAAoC,EAApD,EAAwD;AACtD,YAAMC,QAAQ,qBAAQJ,MAAM,CAACK,KAAf,CAAd;;AACAD,QAAAA,QAAQ,CAACJ,MAAM,CAACE,cAAP,CAAsBL,MAAvB,CAAR,GAAyC;AACvCS,UAAAA,EAAE,EAAEN,MAAM,CAACE,cAAP,CAAsBL,MADa;AAEvCU,UAAAA,KAAK,EAAEP,MAAM,CAACE,cAAP,CAAsBC,SAFU;AAGvCT,UAAAA,WAAW,EAAEM,MAAM,CAACE,cAAP,CAAsBM,eAHI;AAIvCf,UAAAA,QAAQ,EAAEO,MAAM,CAACE,cAAP,CAAsBT;AAJO,SAAzC;AAMAQ,QAAAA,gBAAgB,CAAC,OAAD,oBACXG,QADW,EAAhB;AAGD;;AACD,YAAKN,QAAL,CAAc;AAAET,QAAAA,QAAQ,EAAE,CAACA;AAAb,OAAd;AACD,K;;UAGDoB,c,GAAiB,YAAM;AAAA,UACbnB,QADa,GACA,MAAKF,KADL,CACbE,QADa;AAAA,yBAEgB,MAAKM,KAFrB;AAAA,UAEbI,MAFa,gBAEbA,MAFa;AAAA,UAELC,gBAFK,gBAELA,gBAFK;;AAGrB,UAAIX,QAAQ,IAAIU,MAAM,CAACE,cAAP,CAAsBC,SAAtB,KAAoC,EAApD,EAAwD;AACtD,YAAMC,QAAQ,qBAAQJ,MAAM,CAACK,KAAf,CAAd;;AACAD,QAAAA,QAAQ,CAACJ,MAAM,CAACE,cAAP,CAAsBL,MAAvB,CAAR,GAAyC;AACvCS,UAAAA,EAAE,EAAEN,MAAM,CAACE,cAAP,CAAsBL,MADa;AAEvCU,UAAAA,KAAK,EAAEP,MAAM,CAACE,cAAP,CAAsBC,SAFU;AAGvCT,UAAAA,WAAW,EAAEM,MAAM,CAACE,cAAP,CAAsBM,eAHI;AAIvCf,UAAAA,QAAQ,EAAEO,MAAM,CAACE,cAAP,CAAsBT;AAJO,SAAzC;AAMAQ,QAAAA,gBAAgB,CAAC,OAAD,oBACXG,QADW,EAAhB;AAGD;;AACD,YAAKN,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,CAACA;AAAb,OAAd;AACD,K;;UAGDoB,W,GAAc,UAACC,CAAD,EAAO;AAAA,yBACkB,MAAKf,KADvB;AAAA,UACXI,MADW,gBACXA,MADW;AAAA,UACHC,gBADG,gBACHA,gBADG;AAAA,kCAIfD,MAAM,CAACE,cAJQ;AAAA,UAGjBU,MAHiB,yBAGjBA,MAHiB;AAAA,UAGTf,MAHS,yBAGTA,MAHS;AAAA,UAGDW,eAHC,yBAGDA,eAHC;AAAA,UAGgBf,QAHhB,yBAGgBA,QAHhB;AAKnBQ,MAAAA,gBAAgB,CAAC,gBAAD,EAAmB;AACjCW,QAAAA,MAAM,EAANA,MADiC;AAEjCf,QAAAA,MAAM,EAANA,MAFiC;AAGjCM,QAAAA,SAAS,EAAEQ,CAAC,CAACE,MAAF,CAASC,KAHa;AAIjCN,QAAAA,eAAe,EAAfA,eAJiC;AAKjCf,QAAAA,QAAQ,EAARA;AALiC,OAAnB,CAAhB;AAOD,K;;UAGDsB,U,GAAa,UAACJ,CAAD,EAAO;AAAA,yBACmB,MAAKf,KADxB;AAAA,UACVI,MADU,gBACVA,MADU;AAAA,UACFC,gBADE,gBACFA,gBADE;AAAA,mCAIdD,MAAM,CAACE,cAJO;AAAA,UAGhBU,MAHgB,0BAGhBA,MAHgB;AAAA,UAGRf,MAHQ,0BAGRA,MAHQ;AAAA,UAGAM,SAHA,0BAGAA,SAHA;AAAA,UAGWV,QAHX,0BAGWA,QAHX;AAKlBQ,MAAAA,gBAAgB,CAAC,gBAAD,EAAmB;AACjCW,QAAAA,MAAM,EAANA,MADiC;AAEjCf,QAAAA,MAAM,EAANA,MAFiC;AAGjCM,QAAAA,SAAS,EAATA,SAHiC;AAIjCK,QAAAA,eAAe,EAAEG,CAAC,CAACE,MAAF,CAASC,KAJO;AAKjCrB,QAAAA,QAAQ,EAARA;AALiC,OAAnB,CAAhB;AAOD,K;;UAEDuB,U,GAAa,UAACL,CAAD,EAAO;AAClB,YAAKb,QAAL,CAAc;AAAEP,QAAAA,WAAW,EAAEoB,CAAC,CAACE,MAAF,CAASC;AAAxB,OAAd;AACD,K;;UAIDG,a,GAAgB,YAAM;AAAA,UACZ1B,WADY,GACI,MAAKH,KADT,CACZG,WADY;;AAEpB,UAAIA,WAAW,KAAK,EAApB,EAAwB;AAAA,2BACqB,MAAKK,KAD1B;AAAA,YACdI,MADc,gBACdA,MADc;AAAA,YACNkB,IADM,gBACNA,IADM;AAAA,YACAjB,gBADA,gBACAA,gBADA;AAAA,qCAIlBD,MAAM,CAACE,cAJW;AAAA,YAGpBU,MAHoB,0BAGpBA,MAHoB;AAAA,YAGZf,MAHY,0BAGZA,MAHY;AAAA,YAGJM,SAHI,0BAGJA,SAHI;AAAA,YAGOK,eAHP,0BAGOA,eAHP;AAAA,YAGwBf,QAHxB,0BAGwBA,QAHxB;AAKtB,YAAM0B,UAAU,IAAI;AAClBC,UAAAA,SAAS,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CADO;AAElBC,UAAAA,IAAI,EAAE;AACJC,YAAAA,MAAM,EAAER,IAAI,CAACO,IAAL,CAAUnB,EADd;AAEJqB,YAAAA,QAAQ,YAAKT,IAAI,CAACO,IAAL,CAAUG,SAAf,cAA4BV,IAAI,CAACO,IAAL,CAAUI,UAAtC,cAAoDX,IAAI,CAACO,IAAL,CAAUK,QAA9D,CAFJ;AAGJC,YAAAA,UAAU,EAAE;AAHR,WAFY;AAOlBC,UAAAA,IAAI,EAAEzC,WAPY;AAQlB0C,UAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AARO,SAAJ,4BASV1C,QATU,EAAhB;AAUAQ,QAAAA,gBAAgB,CAAC,gBAAD,EAAmB;AACjCW,UAAAA,MAAM,EAANA,MADiC;AAEjCf,UAAAA,MAAM,EAANA,MAFiC;AAGjCM,UAAAA,SAAS,EAATA,SAHiC;AAIjCK,UAAAA,eAAe,EAAfA,eAJiC;AAKjCf,UAAAA,QAAQ,EAAE0B;AALuB,SAAnB,CAAhB;AAOAlB,QAAAA,gBAAgB,CAAC,OAAD,oBACXD,MAAM,CAACK,KADI,sBAEbR,MAFa,oBAGTG,MAAM,CAACK,KAAP,CAAaR,MAAb,CAHS;AAIZJ,UAAAA,QAAQ,EAAE0B;AAJE,aAAhB;;AAOA,cAAKrB,QAAL,CAAc;AAAEP,UAAAA,WAAW,EAAE;AAAf,SAAd;AACD;AACF,K;;;;;;;8CAtJyB6C,S,EAAW;AAAA;;AAAA,UAEjCvC,MAFiC,GAO/BuC,SAP+B,CAEjCvC,MAFiC;AAAA,UAGjCQ,KAHiC,GAO/B+B,SAP+B,CAGjC/B,KAHiC;AAAA,UAIjCZ,QAJiC,GAO/B2C,SAP+B,CAIjC3C,QAJiC;AAAA,UAKjC4C,WALiC,GAO/BD,SAP+B,CAKjCC,WALiC;AAAA,UAMjCC,YANiC,GAO/BF,SAP+B,CAMjCE,YANiC;AAQnC,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAchD,QAAQ,CAACiD,IAAvB,EAA6BC,MAA7B,CAAoC,UAACC,GAAD,EAAS;AAChE,YAAI/C,MAAM,KAAK+C,GAAG,CAACC,iBAAnB,EAAsC;AACpC,iBAAOD,GAAP;AACD;AACF,OAJoB,CAArB;AAKA,UAAME,eAAe,GAAGN,MAAM,CAACC,MAAP,CAAchD,QAAQ,CAACiD,IAAvB,EAA6BC,MAA7B,CAAoC,UAACC,GAAD,EAAS;AACnE,YAAI/C,MAAM,KAAK+C,GAAG,CAACC,iBAAnB,EAAsC;AACpC,iBAAOD,GAAP;AACD;AACF,OAJuB,CAAxB,CAbmC,CAkBnC;;AACA,UAAMG,gBAAgB,GAAGP,MAAM,CAACC,MAAP,CAAcH,YAAY,CAACI,IAA3B,EAAiCM,IAAjC,CAAsChE,gBAAtC,EAAwD,CAAxD,CAAzB;AACAqB,MAAAA,KAAK,CAAC4C,GAAN,CAAU,UAACL,GAAD,EAAS;AACjB,YAAIA,GAAG,CAACtC,EAAJ,KAAWT,MAAf,EAAuB;AACrB,UAAA,MAAI,CAACC,QAAL,CAAc;AACZL,YAAAA,QAAQ,EAAE8C,YADE;AAEZF,YAAAA,WAAW,EAAES,eAFD;AAGZtD,YAAAA,IAAI,EAAEoD,GAHM;AAIZlD,YAAAA,WAAW,EAAEqD;AAJD,WAAd;AAMD;AACF,OATD;AAUD,K,CAED;;;;6BAwHS;AAAA;;AAAA,yBACmC,KAAKnD,KADxC;AAAA,UACCgB,MADD,gBACCA,MADD;AAAA,UACSf,MADT,gBACSA,MADT;AAAA,UACiBQ,KADjB,gBACiBA,KADjB;AAAA,UACwBL,MADxB,gBACwBA,MADxB;AAAA,mCAE0CA,MAAM,CAACE,cAFjD;AAAA,UAECC,SAFD,0BAECA,SAFD;AAAA,UAEYK,eAFZ,0BAEYA,eAFZ;AAAA,UAE6Bf,QAF7B,0BAE6BA,QAF7B;AAAA,wBAG2C,KAAKL,KAHhD;AAAA,UAGCC,QAHD,eAGCA,QAHD;AAAA,UAGWC,QAHX,eAGWA,QAHX;AAAA,UAGqBC,WAHrB,eAGqBA,WAHrB;AAAA,UAGkCC,IAHlC,eAGkCA,IAHlC;AAIP,aACE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAEoB,MADV;AAEE,QAAA,OAAO,EAAE,KAAKjB,OAFhB;AAGE,QAAA,SAAS,EAAC,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGN,QAAQ,GAAG,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEG,IAAI,CAAC0D,IAAtB;AAA4B,QAAA,QAAQ,EAAE,kBAAAvC,CAAC;AAAA,iBAAI,MAAI,CAACD,WAAL,CAAiBC,CAAjB,CAAJ;AAAA,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAEL;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGnB,IAAI,CAAC0D,IADR,CADF,CAHN,EAUG7D,QAAQ,GAEL,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAE,KAAKU,eAFhB;AAGE,QAAA,SAAS,EAAC,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFK,GASL,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAE,KAAKA,eAFhB;AAGE,QAAA,SAAS,EAAC,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBN,EA0BE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAE;AAAEoD,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,OAAO,MAHT;AAIE,QAAA,OAAO,EAAE,KAAKxD,OAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF,CADF,EAkCE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEGL,QAAQ,GAEL,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAE,KAAKmB,cAFhB;AAGE,QAAA,KAAK,MAHP;AAIE,QAAA,SAAS,EAAC,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFK,GAUL,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAE,KAAKA,cAFhB;AAGE,QAAA,KAAK,MAHP;AAIE,QAAA,SAAS,EAAC,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZN,CADF,EAsBE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGnB,QAAQ,GAAG,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEE,IAAI,CAACE,WAAtB;AAAmC,QAAA,QAAQ,EAAE,KAAKqB,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOvB,IAAI,CAACE,WAAZ,CADjF,CAtBF,CADF,EA2BE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,IAAI,MADN;AAEE,QAAA,WAAW,EAAC,oBAFd;AAGE,QAAA,KAAK,EAAEH,WAHT;AAIE,QAAA,QAAQ,EAAE,kBAAAoB,CAAC;AAAA,iBAAI,MAAI,CAACK,UAAL,CAAgBL,CAAhB,CAAJ;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAEyC,UAAAA,UAAU,EAAE;AAAd,SADT;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,MAAM,EAAEtE,MAAM,CAACuE,OAHjB;AAIE,QAAA,OAAO,EAAE,KAAKpC,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CA3BF,EAyCE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGxB,QAAQ,CAACwD,GAAT,CAAa,UAACK,OAAD,EAAa;AACzB,eACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAA2B,UAAA,GAAG,EAAEA,OAAO,CAAClC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,GAAG,EAAEnC,WADP;AAEE,UAAA,MAAM,EAAC,MAFT;AAGE,UAAA,GAAG,EAAC,0BAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,EAQE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,KAAK,EAAE;AAAEsE,YAAAA,QAAQ,EAAE,MAAZ;AAAoBC,YAAAA,UAAU,EAAE,MAAhC;AAAwCC,YAAAA,OAAO,EAAE;AAAjD,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwEH,OAAO,CAAC7B,IAAR,CAAaE,QAArF,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAQ2B,OAAO,CAACrB,SAAhB,CAFF,CADF,EAKE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAAEwB,YAAAA,OAAO,EAAE;AAAX,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGH,OAAO,CAACtB,IADX,CALF,CARF,CADF;AAoBD,OArBA,CAFH,CAzCF,CAlCF,EAqGE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBArGF,CALF,CADF;AAiHD;;;;EAvRuBvD,S;;AA0R1BU,WAAW,CAACuE,SAAZ,GAAwB;AACtB/D,EAAAA,OAAO,EAAEZ,SAAS,CAAC4E,IAAV,CAAeC,UADF;AAEtBhD,EAAAA,MAAM,EAAE7B,SAAS,CAAC8E,IAAV,CAAeD,UAFD;AAGtB/D,EAAAA,MAAM,EAAEd,SAAS,CAAC+E,MAAV,CAAiBF,UAHH;AAItBvD,EAAAA,KAAK,EAAEtB,SAAS,CAACgF,OAAV,CAAkBhF,SAAS,CAACiF,GAA5B,EAAiCJ;AAJlB,CAAxB;;AAOA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAAA7E,KAAK;AAAA,SAAIA,KAAJ;AAAA,CAA7B;;AACA,eAAeV,OAAO,CAACuF,eAAD,CAAP,CAAyB9E,WAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport { timeStampSorting } from '../../screens/users/utility-functions';\n\nconst profileIcon = require('../../assets/imageUploadIcon.png');\n\nclass TaskOverlay extends Component {\n  state = {\n    editHead: false,\n    editDesc: false,\n    commentText: '',\n    task: { },\n    comments: [],\n    description: '',\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      taskId,\n      tasks,\n      comments,\n      attachments,\n      descriptions,\n    } = nextProps;\n    const commentsCard = Object.values(comments.byId).filter((obj) => {\n      if (taskId === obj.boardColumnCardId) {\n        return obj;\n      }\n    });\n    const attachmentsCard = Object.values(comments.byId).filter((obj) => {\n      if (taskId === obj.boardColumnCardId) {\n        return obj;\n      }\n    });\n    // finding the latest description\n    const latestDesription = Object.values(descriptions.byId).sort(timeStampSorting)[0];\n    tasks.map((obj) => {\n      if (obj.id === taskId) {\n        this.setState({\n          comments: commentsCard,\n          attachments: attachmentsCard,\n          task: obj,\n          description: latestDesription,\n        });\n      }\n    });\n  }\n\n  // on overlay close\n  onClose = () => {\n    const { onClose, taskId } = this.props;\n    onClose(taskId);\n    this.setState({\n      editHead: false,\n      editDesc: false,\n      commentText: '',\n    });\n  };\n\n  // toggle between the element of title\n  toggleElemTitle = () => {\n    const { editHead } = this.state;\n    const { _class, updateClassValue } = this.props;\n    if (editHead && _class.overLayContent.taskTitle !== '') {\n      const newTasks = { ..._class.tasks };\n      newTasks[_class.overLayContent.taskId] = {\n        id: _class.overLayContent.taskId,\n        title: _class.overLayContent.taskTitle,\n        description: _class.overLayContent.taskDescription,\n        comments: _class.overLayContent.comments,\n      };\n      updateClassValue('tasks', {\n        ...newTasks,\n      });\n    }\n    this.setState({ editHead: !editHead });\n  };\n\n  // toggle between the element of description\n  toggleElemDesc = () => {\n    const { editDesc } = this.state;\n    const { _class, updateClassValue } = this.props;\n    if (editDesc && _class.overLayContent.taskTitle !== '') {\n      const newTasks = { ..._class.tasks };\n      newTasks[_class.overLayContent.taskId] = {\n        id: _class.overLayContent.taskId,\n        title: _class.overLayContent.taskTitle,\n        description: _class.overLayContent.taskDescription,\n        comments: _class.overLayContent.comments,\n      };\n      updateClassValue('tasks', {\n        ...newTasks,\n      });\n    }\n    this.setState({ editDesc: !editDesc });\n  };\n\n  // changing title of the task\n  titleChange = (e) => {\n    const { _class, updateClassValue } = this.props;\n    const {\n      isOpen, taskId, taskDescription, comments,\n    } = _class.overLayContent;\n    updateClassValue('overLayContent', {\n      isOpen,\n      taskId,\n      taskTitle: e.target.value,\n      taskDescription,\n      comments,\n    });\n  }\n\n  // description change of the task\n  descChange = (e) => {\n    const { _class, updateClassValue } = this.props;\n    const {\n      isOpen, taskId, taskTitle, comments,\n    } = _class.overLayContent;\n    updateClassValue('overLayContent', {\n      isOpen,\n      taskId,\n      taskTitle,\n      taskDescription: e.target.value,\n      comments,\n    });\n  }\n\n  putComment = (e) => {\n    this.setState({ commentText: e.target.value });\n  }\n\n  // submitting comment here and change the state in both overlaycontent and in the task\n  // in stores\n  submitComment = () => {\n    const { commentText } = this.state;\n    if (commentText !== '') {\n      const { _class, main, updateClassValue } = this.props;\n      const {\n        isOpen, taskId, taskTitle, taskDescription, comments,\n      } = _class.overLayContent;\n      const newComment = [{\n        commentId: Math.random().toString(36).substring(7),\n        user: {\n          userId: main.user.id,\n          userName: `${main.user.firstName} ${main.user.middleName} ${main.user.lastName}`,\n          profilePic: 'www.google.com',\n        },\n        text: commentText,\n        timestamp: Date.now(),\n      }, ...comments];\n      updateClassValue('overLayContent', {\n        isOpen,\n        taskId,\n        taskTitle,\n        taskDescription,\n        comments: newComment,\n      });\n      updateClassValue('tasks', {\n        ..._class.tasks,\n        [taskId]: {\n          ..._class.tasks[taskId],\n          comments: newComment,\n        },\n      });\n      this.setState({ commentText: '' });\n    }\n  }\n\n  render() {\n    const { isOpen, taskId, tasks, _class } = this.props;\n    const { taskTitle, taskDescription, comments } = _class.overLayContent;\n    const { editHead, editDesc, commentText, task } = this.state;\n    return (\n      <Dialog\n        isOpen={isOpen}\n        onClose={this.onClose}\n        className=\"overlay-container\"\n      >\n        <div className=\"task-detail-overlay\">\n          <div className=\"overlay-title\">\n            {editHead ? <TextArea value={task.name} onChange={e => this.titleChange(e)} />\n              : (\n                <div className=\"head\">\n                  <span className=\"title\">\n                    {task.name}\n                  </span>\n                </div>\n              )\n            }\n            {editHead\n              ? (\n                <Button\n                  text=\"Save\"\n                  onClick={this.toggleElemTitle}\n                  className=\"edit-button\"\n                />\n              )\n              : (\n                <Button\n                  text=\"Edit\"\n                  onClick={this.toggleElemTitle}\n                  className=\"edit-button\"\n                />\n              )\n            }\n            <Button\n              icon=\"cross\"\n              style={{ float: 'right' }}\n              minimal\n              onClick={this.onClose}\n            />\n          </div>\n          <div className=\"left\">\n            <div className=\"overlay-description\">\n              <div className=\"desc-head\">\n                <u>Description</u>\n                {editDesc\n                  ? (\n                    <Button\n                      text=\"Save\"\n                      onClick={this.toggleElemDesc}\n                      small\n                      className=\"edit-button\"\n                    />\n                  )\n                  : (\n                    <Button\n                      text=\"Edit\"\n                      onClick={this.toggleElemDesc}\n                      small\n                      className=\"edit-button\"\n                    />\n                  )\n                }\n              </div>\n              <div className=\"desc\">\n                {editDesc ? <TextArea value={task.description} onChange={this.descChange} /> : <span>{task.description}</span>}\n              </div>\n            </div>\n            <div className=\"comment-container\">\n              <TextArea\n                fill\n                placeholder=\"Put your comments.\"\n                value={commentText}\n                onChange={e => this.putComment(e)}\n              />\n              <Button\n                style={{ marginLeft: '5px' }}\n                text=\"Submit\"\n                intent={Intent.PRIMARY}\n                onClick={this.submitComment}\n              />\n            </div>\n            <div className=\"comments\">\n              <h3>History</h3>\n              {comments.map((comment) => {\n                return (\n                  <div className=\"s-comment\" key={comment.commentId}>\n                    <div>\n                      <img\n                        src={profileIcon}\n                        height=\"45px\"\n                        alt=\"profile or blank profile\"\n                      />\n                    </div>\n                    <div className=\"com-con\">\n                      <div className=\"com-auth\">\n                        <span style={{ fontSize: '16px', fontWeight: 'bold', padding: '3px' }}>{comment.user.userName}</span>\n                        <small>{comment.timestamp}</small>\n                      </div>\n                      <div className=\"com-desc\" style={{ padding: '3px' }}>\n                        {comment.text}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"right\">\n              Hello\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nTaskOverlay.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  taskId: PropTypes.number.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = state => state;\nexport default connect(mapStateToProps)(TaskOverlay);\n"]},"metadata":{},"sourceType":"module"}