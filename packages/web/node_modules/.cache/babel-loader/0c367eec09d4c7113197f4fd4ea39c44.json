{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport posSorting from '../utility-functions';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // true if the id in the url doesn't match\n      redirectionError: false,\n      api: {},\n      classId: null,\n      columns: [],\n      tasks: [],\n      comments: [],\n      attachments: [],\n      descriptions: [],\n      taskOverlayIsOpen: false,\n      // the task id contained in the overlay\n      taskIdInOverlay: 0\n    };\n\n    _this.onDragEnd =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(result) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.toggleTaskOverlay = function (id) {\n      var taskOverlayIsOpen = _this.state.taskOverlayIsOpen;\n\n      _this.setState({\n        taskIdInOverlay: id,\n        taskOverlayIsOpen: !taskOverlayIsOpen\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          account = _this$props.account,\n          match = _this$props.match;\n      client.scope('Mentee').then(function (result) {\n        // checking if the user's sessionid is real\n        if (match.params.id === account.sessionId) {\n          _this2.setState({\n            api: result,\n            classId: parseInt(match.params.classId, 10)\n          }); // this is to ensure the props loaded in the component\n\n\n          _this2.componentWillReceiveProps(_this2.props);\n        } else {\n          _this2.setState({\n            redirectionError: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var tasks = nextProps.tasks,\n          columns = nextProps.columns,\n          comments = nextProps.comments,\n          attachments = nextProps.attachments,\n          descriptions = nextProps.descriptions;\n      var wholeColumns = [];\n      Object.values(columns.byId).map(function (obj) {\n        var column = _objectSpread({}, obj);\n\n        var task = [];\n        Object.values(tasks.byId).map(function (ob) {\n          if (ob.boardColumnId === obj.id) {\n            task.push(ob);\n          }\n        });\n        task.sort(posSorting);\n        column.tasks = task;\n        wholeColumns.push(column);\n      });\n      this.setState({\n        tasks: Object.values(tasks.byId),\n        columns: wholeColumns.sort(posSorting),\n        comments: Object.values(comments.byId),\n        attachments: Object.values(attachments.byId),\n        descriptions: Object.values(descriptions.byId)\n      });\n    } // all the drag and drop will be handled here\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          classId = _this$state.classId,\n          columns = _this$state.columns,\n          tasks = _this$state.tasks,\n          redirectionError = _this$state.redirectionError,\n          api = _this$state.api,\n          taskIdInOverlay = _this$state.taskIdInOverlay,\n          taskOverlayIsOpen = _this$state.taskOverlayIsOpen,\n          comments = _this$state.comments,\n          attachments = _this$state.attachments,\n          descriptions = _this$state.descriptions;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, redirectionError && React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"classWrapper\",\n        style: {\n          height: window.innerHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }), columns.map(function (column, index) {\n          if (column.boardId === classId) {\n            return React.createElement(Column, {\n              key: column.id,\n              column: column,\n              columnId: column.id,\n              index: index,\n              api: api // passing it for the task overlay open\n              ,\n              onTaskClick: _this3.toggleTaskOverlay,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 279\n              },\n              __self: this\n            });\n          }\n        }), provided.placeholder, React.createElement(NewColumn, {\n          classId: classId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }));\n      }))), React.createElement(TaskOverlay, {\n        isOpen: taskOverlayIsOpen,\n        taskId: taskIdInOverlay,\n        tasks: tasks,\n        onClose: this.toggleTaskOverlay,\n        comments: comments,\n        attachments: attachments,\n        descriptions: descriptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var database = state.database,\n      account = state.account;\n  var columns = database.BoardColumn;\n  var tasks = database.BoardColumnCard;\n  var comments = database.BoardColumnCardComment;\n  var descriptions = database.BoardColumnCardDescription;\n  var attachments = database.BoardColumnCardAttachment;\n  return {\n    account: account,\n    columns: columns,\n    tasks: tasks,\n    comments: comments,\n    descriptions: descriptions,\n    attachments: attachments\n  };\n};\n\nexport default connect(mapStateToProps)(Classes);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js"],"names":["React","Component","Redirect","connect","PropTypes","DragDropContext","Droppable","Column","NewColumn","TaskOverlay","Navbar","client","posSorting","Classes","state","redirectionError","api","classId","columns","tasks","comments","attachments","descriptions","taskOverlayIsOpen","taskIdInOverlay","onDragEnd","result","toggleTaskOverlay","id","setState","props","account","match","scope","then","params","sessionId","parseInt","componentWillReceiveProps","nextProps","wholeColumns","Object","values","byId","map","obj","column","task","ob","boardColumnId","push","sort","height","window","innerHeight","provided","droppableProps","innerRef","index","boardId","placeholder","propTypes","objectOf","any","isRequired","mapStateToProps","database","BoardColumn","BoardColumnCard","BoardColumnCardComment","BoardColumnCardDescription","BoardColumnCardAttachment"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport posSorting from '../utility-functions';\n\n\nclass Classes extends Component {\n  state = {\n    // true if the id in the url doesn't match\n    redirectionError: false,\n    api: {},\n    classId: null,\n    columns: [],\n    tasks: [],\n    comments: [],\n    attachments: [],\n    descriptions: [],\n    taskOverlayIsOpen: false,\n    // the task id contained in the overlay\n    taskIdInOverlay: 0,\n  };\n\n  componentWillMount() {\n    const {\n      account,\n      match,\n    } = this.props;\n    client.scope('Mentee').then((result) => {\n      // checking if the user's sessionid is real\n      if (match.params.id === account.sessionId) {\n        this.setState({\n          api: result,\n          classId: parseInt(match.params.classId, 10),\n        });\n        // this is to ensure the props loaded in the component\n        this.componentWillReceiveProps(this.props);\n      } else {\n        this.setState({\n          redirectionError: true,\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      tasks,\n      columns,\n      comments,\n      attachments,\n      descriptions,\n    } = nextProps;\n    const wholeColumns = [];\n    Object.values(columns.byId).map((obj) => {\n      const column = { ...obj };\n      const task = [];\n      Object.values(tasks.byId).map((ob) => {\n        if (ob.boardColumnId === obj.id) {\n          task.push(ob);\n        }\n      });\n      task.sort(posSorting);\n      column.tasks = task;\n      wholeColumns.push(column);\n    });\n    this.setState({\n      tasks: Object.values(tasks.byId),\n      columns: wholeColumns.sort(posSorting),\n      comments: Object.values(comments.byId),\n      attachments: Object.values(attachments.byId),\n      descriptions: Object.values(descriptions.byId),\n    });\n  }\n\n  // all the drag and drop will be handled here\n  onDragEnd = async (result) => {\n    // const { source, destination, draggableId, type } = result;\n    // const { api, columns } = this.state;\n    // if (!destination) {\n    //   return;\n    // }\n    // // column moving around\n    // if (type === 'column') {\n    //   if (source.index === destination.index) {\n    //     return;\n    //   }\n    //   const columnId = Number(draggableId.split('column')[1]);\n    //   const newColumns = columns;\n    //   let column = {};\n    //   columns.map((obj) => {\n    //     if (obj.id === columnId) {\n    //       column = obj;\n    //     }\n    //   });\n    //   // testing for the swapping either in start, middle or end.\n    //   if (destination.index === 0) {\n    //     column.position = columns[0].position / 2;\n    //   } else if (destination.index === columns.length - 1) {\n    //     column.position = columns[destination.index].position + 16384;\n    //   } else {\n    //     if (source.index > destination.index) {\n    //       column.position = (columns[destination.index - 1].position\n    //         + columns[destination.index].position) / 2;\n    //     }\n    //     if (source.index < destination.index) {\n    //       column.position = (columns[destination.index].position\n    //         + columns[destination.index + 1].position) / 2;\n    //     }\n    //   }\n    //   newColumns.splice(source.index, 1);\n    //   newColumns.splice(destination.index, 0, column);\n    //   this.setState({\n    //     columns: newColumns,\n    //   });\n    //   await api.updateBoardColumn([\n    //     { position: column.position, timeStamp: Date.now() }, { id: columnId }]);\n    //   return;\n    // }\n    // // finished column moving around here\n    // // cards movement within the column\n    // if (source.droppableId === destination.droppableId) {\n    //   const dropable = Number(source.droppableId);\n    //   const dragable = Number(draggableId.split('task')[1]);\n    //   const newColumns = columns;\n    //   let newColumn = {};\n    //   let newTasks = [];\n    //   columns.map((obj) => {\n    //     if (obj.id === dropable) {\n    //       newColumn = obj;\n    //       newTasks = obj.tasks;\n    //     }\n    //   });\n    //   let newTask = {};\n    //   newTasks.map((o) => {\n    //     if (o.id === dragable) {\n    //       newTask = o;\n    //     }\n    //   });\n    //   if (destination.index === 0) {\n    //     newTask.position = newTasks[0].position / 2;\n    //   } else if (destination.index === newTasks.length - 1) {\n    //     newTask.position = newTasks[destination.index].position + 16384;\n    //   } else {\n    //     if (source.index > destination.index) {\n    //       newTask.position = (newTasks[destination.index - 1].position\n    //         + newTasks[destination.index].position) / 2;\n    //     }\n    //     if (source.index < destination.index) {\n    //       newTask.position = (newTasks[destination.index].position\n    //         + newTasks[destination.index + 1].position) / 2;\n    //     }\n    //   }\n    //   newTasks.splice(source.index, 1);\n    //   newTasks.splice(destination.index, 0, newTask);\n    //   newColumn.tasks = newTasks;\n    //   newColumns.splice(dropable, 1);\n    //   newColumns.splice(dropable, 0, newColumn);\n    //   this.setState({\n    //     columns: newColumns,\n    //   });\n    //   await api.updateBoardColumnCard([\n    //     { position: newTask.position, timestamp: Date.now() }, { id: dragable }]);\n    //   return;\n    // }\n    // // cards movement within the column ends here\n    // // inter column task move using state\n    // const sourceDropable = Number(source.droppableId);\n    // const destinationDropable = Number(destination.droppableId);\n\n    // const dragable = Number(draggableId.split('task')[1]);\n    // const newColumns = columns;\n    // let sourceColumnIndex;\n    // let destinationColumnIndex;\n    // let fromColumn = {};\n    // let toColumn = {};\n    // newColumns.map((obj, index) => {\n    //   if (obj.id === sourceDropable) {\n    //     fromColumn = obj;\n    //     sourceColumnIndex = index;\n    //   }\n    //   if (obj.id === destinationDropable) {\n    //     toColumn = obj;\n    //     destinationColumnIndex = index;\n    //   }\n    // });\n    // const fromTasks = fromColumn.tasks;\n    // const toTasks = toColumn.tasks;\n    // let newTask;\n    // fromTasks.map((obj) => {\n    //   if (obj.id === dragable) {\n    //     newTask = obj;\n    //   }\n    // });\n    // fromTasks.splice(source.index, 1);\n    // if (destination.index === 0) {\n    //   if (toTasks.length !== 0) {\n    //     newTask.position = toTasks[0].position / 2;\n    //   } else {\n    //     newTask.position = 16384;\n    //   }\n    // } else if (destination.index === toTasks.length) {\n    //   newTask.position = toTasks[destination.index - 1].position + 16384;\n    // } else {\n    //   newTask.position = (toTasks[destination.index - 1].position\n    //     + toTasks[destination.index].position) / 2;\n    // }\n    // toTasks.splice(destination.index, 0, newTask);\n    // toColumn.tasks = toTasks;\n    // fromColumn.tasks = fromTasks;\n    // newColumns.splice(sourceColumnIndex, 1);\n    // newColumns.splice(sourceColumnIndex, 0, fromColumn);\n    // newColumns.splice(destinationColumnIndex, 1);\n    // newColumns.splice(destinationColumnIndex, 0, toColumn);\n    // this.setState({\n    //   columns: newColumns,\n    // });\n    // await api.updateBoardColumnCard([\n    //   {\n    //     position: newTask.position,\n    //     timeStamp: Date.now(),\n    //     boardColumnId: destinationDropable,\n    //   },\n    //   { id: dragable },\n    // ]);\n  }\n\n  toggleTaskOverlay = (id) => {\n    const { taskOverlayIsOpen } = this.state;\n    this.setState({\n      taskIdInOverlay: id,\n      taskOverlayIsOpen: !taskOverlayIsOpen,\n    });\n  }\n\n  render() {\n    const {\n      classId,\n      columns,\n      tasks,\n      redirectionError,\n      api,\n      taskIdInOverlay,\n      taskOverlayIsOpen,\n      comments,\n      attachments,\n      descriptions,\n    } = this.state;\n    return (\n      <div>\n        {redirectionError && <Redirect to=\"/\" />}\n        <Navbar />\n        <div\n          className=\"classWrapper\"\n          style={{ height: window.innerHeight }}\n        >\n          <DragDropContext\n            onDragEnd={this.onDragEnd}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              { provided => (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {\n                    columns.map((column, index) => {\n                      if (column.boardId === classId) {\n                        return (\n                          <Column\n                            key={column.id}\n                            column={column}\n                            columnId={column.id}\n                            index={index}\n                            api={api}\n                            // passing it for the task overlay open\n                            onTaskClick={this.toggleTaskOverlay}\n                          />\n                        );\n                      }\n                    })\n                  }\n                  {provided.placeholder}\n                  <NewColumn classId={classId} />\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <TaskOverlay\n          isOpen={taskOverlayIsOpen}\n          taskId={taskIdInOverlay}\n          tasks={tasks}\n          onClose={this.toggleTaskOverlay}\n          comments={comments}\n          attachments={attachments}\n          descriptions={descriptions}\n        />\n      </div>\n    );\n  }\n}\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { database, account } = state;\n  const columns = database.BoardColumn;\n  const tasks = database.BoardColumnCard;\n  const comments = database.BoardColumnCardComment;\n  const descriptions = database.BoardColumnCardDescription;\n  const attachments = database.BoardColumnCardAttachment;\n  return {\n    account,\n    columns,\n    tasks,\n    comments,\n    descriptions,\n    attachments,\n  };\n};\nexport default connect(mapStateToProps)(Classes);\n"]},"metadata":{},"sourceType":"module"}