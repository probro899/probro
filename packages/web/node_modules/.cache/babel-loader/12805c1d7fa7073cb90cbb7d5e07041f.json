{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // true if the id in the url doesn't match\n      redirectionError: false,\n      api: {},\n      classId: null,\n      columns: [],\n      tasks: [],\n      comments: [],\n      attachments: [],\n      descriptions: [],\n      taskOverlayIsOpen: false,\n      // the task id contained in the overlay\n      taskIdInOverlay: 0\n    };\n\n    _this.onDragEnd =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(result) {\n        var source, destination, draggableId, type, _this$state, api, columns, tasks, newColumns, _newTask, newTask;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(result);\n                source = result.source, destination = result.destination, draggableId = result.draggableId, type = result.type;\n                _this$state = _this.state, api = _this$state.api, columns = _this$state.columns, tasks = _this$state.tasks;\n\n                if (destination) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!(type === 'column')) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // updating the state prior for efficient\n                newColumns = columns.map(function (obj) {\n                  if (obj.id === parseInt(draggableId, 10)) {\n                    return _objectSpread({}, obj, {\n                      timeStamp: Date.now(),\n                      position: destination.index\n                    });\n                  }\n\n                  return obj;\n                });\n\n                _this.setState({\n                  columns: newColumns\n                });\n\n                _context.next = 10;\n                return api.updateBoardColumn([{\n                  position: destination.index,\n                  timeStamp: Date.now()\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 10:\n                return _context.abrupt(\"return\");\n\n              case 11:\n                if (!(source.droppableId === destination.droppableId)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _newTask = tasks.map(function (obj) {\n                  if (obj.id === parseInt(draggableId, 10)) {\n                    return _objectSpread({}, obj, {\n                      timeStamp: Date.now(),\n                      position: destination.index\n                    });\n                  }\n\n                  return obj;\n                });\n\n                _this.setState({\n                  tasks: _newTask\n                });\n\n                _context.next = 16;\n                return api.updateBoardColumnCard([{\n                  position: destination.index,\n                  timestamp: Date.now()\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 16:\n                return _context.abrupt(\"return\");\n\n              case 17:\n                // inter column task move using state\n                newTask = tasks.map(function (obj) {\n                  if (obj.id === parseInt(draggableId, 10)) {\n                    return _objectSpread({}, obj, {\n                      timeStamp: Date.now(),\n                      position: destination.index,\n                      boardColumnId: parseInt(destination.droppableId, 10)\n                    });\n                  }\n\n                  return obj;\n                });\n\n                _this.setState({\n                  tasks: newTask\n                });\n\n                _context.next = 21;\n                return api.updateBoardColumnCard([{\n                  position: destination.index,\n                  timeStamp: Date.now(),\n                  boardColumnId: parseInt(destination.droppableId, 10)\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.toggleTaskOverlay = function (id) {\n      var taskOverlayIsOpen = _this.state.taskOverlayIsOpen;\n\n      _this.setState({\n        taskIdInOverlay: id,\n        taskOverlayIsOpen: !taskOverlayIsOpen\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          account = _this$props.account,\n          match = _this$props.match;\n      client.scope('Mentee').then(function (result) {\n        // checking if the user's sessionid is real\n        if (match.params.id === account.sessionId) {\n          _this2.setState({\n            api: result,\n            classId: parseInt(match.params.classId, 10)\n          }); // this is to ensure the props loaded in the component\n\n\n          _this2.componentWillReceiveProps(_this2.props);\n        } else {\n          _this2.setState({\n            redirectionError: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var tasks = nextProps.tasks,\n          columns = nextProps.columns,\n          comments = nextProps.comments,\n          attachments = nextProps.attachments,\n          descriptions = nextProps.descriptions;\n      this.setState({\n        tasks: Object.values(tasks.byId),\n        columns: Object.values(columns.byId),\n        comments: Object.values(comments.byId),\n        attachments: Object.values(attachments.byId),\n        descriptions: Object.values(descriptions.byId)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          classId = _this$state2.classId,\n          columns = _this$state2.columns,\n          tasks = _this$state2.tasks,\n          redirectionError = _this$state2.redirectionError,\n          api = _this$state2.api,\n          taskIdInOverlay = _this$state2.taskIdInOverlay,\n          taskOverlayIsOpen = _this$state2.taskOverlayIsOpen,\n          comments = _this$state2.comments,\n          attachments = _this$state2.attachments,\n          descriptions = _this$state2.descriptions; // console.log(this.state);\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, redirectionError && React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"classWrapper\",\n        style: {\n          height: window.innerHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }), columns.sort(sorting).map(function (column, index) {\n          if (column.boardId === classId) {\n            return React.createElement(Column, {\n              key: column.id,\n              column: column,\n              columnId: column.id,\n              index: index,\n              tasks: tasks,\n              api: api // passing it for the task overlay open\n              ,\n              onTaskClick: _this3.toggleTaskOverlay,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 177\n              },\n              __self: this\n            });\n          }\n        }), provided.placeholder, React.createElement(NewColumn, {\n          classId: classId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }));\n      }))), React.createElement(TaskOverlay, {\n        isOpen: taskOverlayIsOpen,\n        taskId: taskIdInOverlay,\n        tasks: tasks,\n        onClose: this.toggleTaskOverlay,\n        comments: comments,\n        attachments: attachments,\n        descriptions: descriptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var database = state.database,\n      account = state.account;\n  var columns = database.BoardColumn;\n  var tasks = database.BoardColumnCard;\n  var comments = database.BoardColumnCardComment;\n  var descriptions = database.BoardColumnCardDescription;\n  var attachments = database.BoardColumnCardAttachment;\n  return {\n    account: account,\n    columns: columns,\n    tasks: tasks,\n    comments: comments,\n    descriptions: descriptions,\n    attachments: attachments\n  };\n};\n\nexport default connect(mapStateToProps)(Classes);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js"],"names":["React","Component","Redirect","connect","PropTypes","DragDropContext","Droppable","Column","NewColumn","TaskOverlay","Navbar","client","sorting","Classes","state","redirectionError","api","classId","columns","tasks","comments","attachments","descriptions","taskOverlayIsOpen","taskIdInOverlay","onDragEnd","result","console","log","source","destination","draggableId","type","newColumns","map","obj","id","parseInt","timeStamp","Date","now","position","index","setState","updateBoardColumn","droppableId","newTask","updateBoardColumnCard","timestamp","boardColumnId","toggleTaskOverlay","props","account","match","scope","then","params","sessionId","componentWillReceiveProps","nextProps","Object","values","byId","height","window","innerHeight","provided","droppableProps","innerRef","sort","column","boardId","placeholder","propTypes","objectOf","any","isRequired","mapStateToProps","database","BoardColumn","BoardColumnCard","BoardColumnCardComment","BoardColumnCardDescription","BoardColumnCardAttachment"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\n\nclass Classes extends Component {\n  state = {\n    // true if the id in the url doesn't match\n    redirectionError: false,\n    api: {},\n    classId: null,\n    columns: [],\n    tasks: [],\n    comments: [],\n    attachments: [],\n    descriptions: [],\n    taskOverlayIsOpen: false,\n    // the task id contained in the overlay\n    taskIdInOverlay: 0,\n  };\n\n  componentWillMount() {\n    const {\n      account,\n      match,\n    } = this.props;\n    client.scope('Mentee').then((result) => {\n      // checking if the user's sessionid is real\n      if (match.params.id === account.sessionId) {\n        this.setState({\n          api: result,\n          classId: parseInt(match.params.classId, 10),\n        });\n        // this is to ensure the props loaded in the component\n        this.componentWillReceiveProps(this.props);\n      } else {\n        this.setState({\n          redirectionError: true,\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      tasks,\n      columns,\n      comments,\n      attachments,\n      descriptions,\n    } = nextProps;\n    this.setState({\n      tasks: Object.values(tasks.byId),\n      columns: Object.values(columns.byId),\n      comments: Object.values(comments.byId),\n      attachments: Object.values(attachments.byId),\n      descriptions: Object.values(descriptions.byId),\n    });\n  }\n\n  onDragEnd = async (result) => {\n    console.log(result);\n    const { source, destination, draggableId, type } = result;\n    const { api, columns, tasks } = this.state;\n    if (!destination) {\n      return;\n    }\n    // column moving around\n    if (type === 'column') {\n      // updating the state prior for efficient\n      const newColumns = columns.map((obj) => {\n        if (obj.id === parseInt(draggableId, 10)) {\n          return { ...obj, timeStamp: Date.now(), position: destination.index };\n        }\n        return obj;\n      });\n      this.setState({\n        columns: newColumns,\n      });\n      await api.updateBoardColumn([\n        { position: destination.index, timeStamp: Date.now() }, { id: parseInt(draggableId, 10) }]);\n      return;\n    }\n    if (source.droppableId === destination.droppableId) {\n      const newTask = tasks.map((obj) => {\n        if (obj.id === parseInt(draggableId, 10)) {\n          return { ...obj, timeStamp: Date.now(), position: destination.index };\n        }\n        return obj;\n      });\n      this.setState({\n        tasks: newTask,\n      });\n      await api.updateBoardColumnCard([\n        { position: destination.index, timestamp: Date.now() }, { id: parseInt(draggableId, 10) }]);\n      return;\n    }\n    // inter column task move using state\n    const newTask = tasks.map((obj) => {\n      if (obj.id === parseInt(draggableId, 10)) {\n        return {\n          ...obj,\n          timeStamp: Date.now(),\n          position: destination.index,\n          boardColumnId: parseInt(destination.droppableId, 10),\n        };\n      }\n      return obj;\n    });\n    this.setState({\n      tasks: newTask,\n    });\n    await api.updateBoardColumnCard([\n      {\n        position: destination.index,\n        timeStamp: Date.now(),\n        boardColumnId: parseInt(destination.droppableId, 10),\n      },\n      { id: parseInt(draggableId, 10) },\n    ]);\n  }\n\n  toggleTaskOverlay = (id) => {\n    const { taskOverlayIsOpen } = this.state;\n    this.setState({\n      taskIdInOverlay: id,\n      taskOverlayIsOpen: !taskOverlayIsOpen,\n    });\n  }\n\n  render() {\n    const {\n      classId,\n      columns,\n      tasks,\n      redirectionError,\n      api,\n      taskIdInOverlay,\n      taskOverlayIsOpen,\n      comments,\n      attachments,\n      descriptions,\n    } = this.state;\n    // console.log(this.state);\n    return (\n      <div>\n        {redirectionError && <Redirect to=\"/\" />}\n        <Navbar />\n        <div\n          className=\"classWrapper\"\n          style={{ height: window.innerHeight }}\n        >\n          <DragDropContext\n            onDragEnd={this.onDragEnd}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              { provided => (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {\n                    columns.sort(sorting).map((column, index) => {\n                      if (column.boardId === classId) {\n                        return (\n                          <Column\n                            key={column.id}\n                            column={column}\n                            columnId={column.id}\n                            index={index}\n                            tasks={tasks}\n                            api={api}\n                            // passing it for the task overlay open\n                            onTaskClick={this.toggleTaskOverlay}\n                          />\n                        );\n                      }\n                    })\n                  }\n                  {provided.placeholder}\n                  <NewColumn classId={classId} />\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <TaskOverlay\n          isOpen={taskOverlayIsOpen}\n          taskId={taskIdInOverlay}\n          tasks={tasks}\n          onClose={this.toggleTaskOverlay}\n          comments={comments}\n          attachments={attachments}\n          descriptions={descriptions}\n        />\n      </div>\n    );\n  }\n}\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { database, account } = state;\n  const columns = database.BoardColumn;\n  const tasks = database.BoardColumnCard;\n  const comments = database.BoardColumnCardComment;\n  const descriptions = database.BoardColumnCardDescription;\n  const attachments = database.BoardColumnCardAttachment;\n  return {\n    account,\n    columns,\n    tasks,\n    comments,\n    descriptions,\n    attachments,\n  };\n};\nexport default connect(mapStateToProps)(Classes);\n"]},"metadata":{},"sourceType":"module"}