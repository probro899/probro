{"ast":null,"code":"import _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/components/Classes.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column } from '../../../common/ClassComponents';\nvar initialData = {\n  tasks: {\n    'task-1': {\n      id: 'task-1',\n      content: 'Take out the garbage'\n    },\n    'task-2': {\n      id: 'task-2',\n      content: 'Wash clothes'\n    },\n    'task-3': {\n      id: 'task-3',\n      content: 'Cook your food'\n    },\n    'task-4': {\n      id: 'task-4',\n      content: 'Do proper class in a proper way'\n    },\n    'task-5': {\n      id: 'task-5',\n      content: 'Deadline is coming'\n    }\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'todo',\n      taskIds: ['task-1', 'task-4']\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'Progress',\n      taskIds: ['task-2', 'task-3']\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: ['task-5']\n    }\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3']\n};\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialData;\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var source = result.source,\n          destination = result.destination,\n          draggableId = result.draggableId;\n      var columns = _this.state.columns;\n\n      if (!destination) {\n        return;\n      }\n\n      var start = columns[source.droppableId];\n      var finish = columns[destination.droppableId];\n\n      if (start === finish) {\n        var newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newTaskIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      } // moving from one column to another\n\n\n      var startTaskIds = Array.from(start.taskIds);\n      var finishTaskIds = Array.from(finish.taskIds);\n      startTaskIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startTaskIds\n      });\n\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      });\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          tasks = _this$state.tasks,\n          columns = _this$state.columns,\n          columnOrder = _this$state.columnOrder;\n      return React.createElement(\"div\", {\n        className: \"classes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          fontSize: '25px',\n          fontWeight: 500\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Classes\")), React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }), columnOrder.map(function (columnId) {\n          var column = columns[columnId];\n          var allTask = column.taskIds.map(function (taskId) {\n            return tasks[taskId];\n          });\n          return React.createElement(Column, {\n            key: column.id,\n            column: column,\n            tasks: allTask,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          });\n        }), provided.placeholder);\n      })));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nexport default Classes;","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/components/Classes.js"],"names":["React","Component","DragDropContext","Droppable","Column","initialData","tasks","id","content","columns","title","taskIds","columnOrder","Classes","state","onDragEnd","result","source","destination","draggableId","start","droppableId","finish","newTaskIds","Array","from","splice","index","newColumn","newState","setState","startTaskIds","finishTaskIds","newStart","newFinish","fontSize","fontWeight","provided","droppableProps","innerRef","map","columnId","column","allTask","taskId","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column } from '../../../common/ClassComponents';\n\nconst initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Take out the garbage' },\n    'task-2': { id: 'task-2', content: 'Wash clothes' },\n    'task-3': { id: 'task-3', content: 'Cook your food' },\n    'task-4': { id: 'task-4', content: 'Do proper class in a proper way' },\n    'task-5': { id: 'task-5', content: 'Deadline is coming' },\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'todo',\n      taskIds: ['task-1', 'task-4'],\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'Progress',\n      taskIds: ['task-2', 'task-3'],\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: ['task-5'],\n    },\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nclass Classes extends Component {\n  state = initialData;\n\n  onDragEnd = (result) => {\n    const { source, destination, draggableId } = result;\n    const { columns } = this.state;\n    if (!destination) {\n      return;\n    }\n    const start = columns[source.droppableId];\n    const finish = columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n      const newState = {\n        ...this.state,\n        columns: {\n          ...columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n      this.setState(newState);\n      return;\n    }\n    // moving from one column to another\n    const startTaskIds = Array.from(start.taskIds);\n    const finishTaskIds = Array.from(finish.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n    const newState = {\n      ...this.state,\n      columns: {\n        ...columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.setState(newState);\n  }\n\n  render() {\n    const { tasks, columns, columnOrder } = this.state;\n    return (\n      <div className=\"classes\">\n        <div>\n          <span style={{ fontSize: '25px', fontWeight: 500 }}>\n            Classes\n          </span>\n        </div>\n        <DragDropContext\n          onDragEnd={this.onDragEnd}\n        >\n          <Droppable\n            droppableId=\"all-columns\"\n            direction=\"horizontal\"\n            type=\"column\"\n          >\n            { provided => (\n              <div\n                className=\"columns\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {\n                  columnOrder.map((columnId) => {\n                    const column = columns[columnId];\n                    const allTask = column.taskIds.map(taskId => tasks[taskId]);\n                    return (\n                      <Column\n                        key={column.id}\n                        column={column}\n                        tasks={allTask}\n                      />\n                    );\n                  })\n                }\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default Classes;\n"]},"metadata":{},"sourceType":"module"}