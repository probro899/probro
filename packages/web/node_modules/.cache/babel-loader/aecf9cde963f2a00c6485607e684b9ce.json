{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\n\nvar profileIcon = require('../../assets/imageUploadIcon.png');\n\nvar TaskOverlay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskOverlay, _Component);\n\n  function TaskOverlay() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskOverlay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      editHead: false,\n      editDesc: false\n    };\n\n    _this.onClose = function () {\n      var _this$props = _this.props,\n          _class = _this$props._class,\n          updateClassValue = _this$props.updateClassValue;\n      updateClassValue('overLayContent', _objectSpread({}, _class.overLayContent, {\n        isOpen: false\n      }));\n\n      _this.setState({\n        editHead: false,\n        editDesc: false\n      });\n    };\n\n    _this.toggleElemTitle = function () {\n      var editHead = _this.state.editHead;\n\n      _this.setState({\n        editHead: !editHead\n      });\n    };\n\n    _this.toggleElemDesc = function () {\n      var editDesc = _this.state.editDesc;\n\n      _this.setState({\n        editDesc: !editDesc\n      });\n    };\n\n    _this.titleChange = function (e) {\n      var _this$props2 = _this.props,\n          _class = _this$props2._class,\n          updateClassValue = _this$props2.updateClassValue;\n      var _class$overLayContent = _class.overLayContent,\n          isOpen = _class$overLayContent.isOpen,\n          taskId = _class$overLayContent.taskId,\n          taskDescription = _class$overLayContent.taskDescription,\n          comments = _class$overLayContent.comments;\n      updateClassValue('overLayContent', {\n        isOpen: isOpen,\n        taskId: taskId,\n        taskTitle: e.target.value,\n        taskDescription: taskDescription,\n        comments: comments\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TaskOverlay, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _class = this.props._class;\n      var _class$overLayContent2 = _class.overLayContent,\n          isOpen = _class$overLayContent2.isOpen,\n          taskTitle = _class$overLayContent2.taskTitle,\n          taskDescription = _class$overLayContent2.taskDescription,\n          comments = _class$overLayContent2.comments;\n      var _this$state = this.state,\n          editHead = _this$state.editHead,\n          editDesc = _this$state.editDesc;\n      return React.createElement(Dialog, {\n        isOpen: isOpen,\n        onClose: this.onClose,\n        className: \"overlay-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"task-detail-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"overlay-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, editHead ? React.createElement(TextArea, {\n        value: taskTitle,\n        onChange: function onChange(e) {\n          return _this2.titleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, taskTitle)), editHead ? React.createElement(Button, {\n        text: \"Save\",\n        onClick: this.toggleElemTitle,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }) : React.createElement(Button, {\n        text: \"Edit\",\n        onClick: this.toggleElemTitle,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"overlay-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"desc-head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Description\"), editDesc ? React.createElement(Button, {\n        text: \"Save\",\n        onClick: this.toggleElemDesc,\n        small: true,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }) : React.createElement(Button, {\n        text: \"Edit\",\n        onClick: this.toggleElemDesc,\n        small: true,\n        className: \"edit-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"desc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, editDesc ? React.createElement(TextArea, {\n        value: taskDescription,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, taskDescription))), React.createElement(\"div\", {\n        className: \"comment-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        fill: true,\n        placeholder: \"Put your comments.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Button, {\n        style: {\n          marginLeft: '5px'\n        },\n        text: \"Submit\",\n        intent: Intent.PRIMARY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"comments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"History\"), comments.map(function (comment) {\n        return React.createElement(\"div\", {\n          className: \"s-comment\",\n          key: comment.commentId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: profileIcon,\n          height: \"45px\",\n          alt: \"profile or blank profile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"com-con\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"com-auth\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            fontSize: '16px',\n            fontWeight: 'bold',\n            padding: '3px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, comment.user.userName), React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, comment.timestamp)), React.createElement(\"div\", {\n          className: \"com-desc\",\n          style: {\n            padding: '3px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, comment.text)));\n      }))));\n    }\n  }]);\n\n  return TaskOverlay;\n}(Component);\n\nTaskOverlay.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownprops) {\n  return _objectSpread({}, state, ownprops);\n};\n\nexport default connect(mapStateToProps, _objectSpread({}, actions))(TaskOverlay);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/TaskOverlay.js"],"names":["React","Component","connect","Dialog","Button","TextArea","Intent","PropTypes","actions","profileIcon","require","TaskOverlay","state","editHead","editDesc","onClose","props","_class","updateClassValue","overLayContent","isOpen","setState","toggleElemTitle","toggleElemDesc","titleChange","e","taskId","taskDescription","comments","taskTitle","target","value","marginLeft","PRIMARY","map","comment","commentId","fontSize","fontWeight","padding","user","userName","timestamp","text","propTypes","objectOf","any","isRequired","func","mapStateToProps","ownprops"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, Button, TextArea, Intent } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\n\nconst profileIcon = require('../../assets/imageUploadIcon.png');\n\nclass TaskOverlay extends Component {\n  state = {\n    editHead: false,\n    editDesc: false,\n  };\n\n  onClose = () => {\n    const { _class, updateClassValue } = this.props;\n    updateClassValue('overLayContent', { ..._class.overLayContent, isOpen: false });\n    this.setState({\n      editHead: false,\n      editDesc: false,\n    });\n  };\n\n  toggleElemTitle = () => {\n    const { editHead } = this.state;\n    this.setState({ editHead: !editHead });\n  };\n\n  toggleElemDesc = () => {\n    const { editDesc } = this.state;\n    this.setState({ editDesc: !editDesc });\n  };\n\n  titleChange = (e) => {\n    const { _class, updateClassValue } = this.props;\n    const {\n      isOpen, taskId, taskDescription, comments,\n    } = _class.overLayContent;\n    updateClassValue('overLayContent', {\n      isOpen,\n      taskId,\n      taskTitle: e.target.value,\n      taskDescription,\n      comments,\n    });\n  }\n\n  render() {\n    const { _class } = this.props;\n    const { isOpen, taskTitle, taskDescription, comments } = _class.overLayContent;\n    const { editHead, editDesc } = this.state;\n    return (\n      <Dialog\n        isOpen={isOpen}\n        onClose={this.onClose}\n        className=\"overlay-container\"\n      >\n        <div className=\"task-detail-overlay\">\n          <div className=\"overlay-title\">\n            {editHead ? <TextArea value={taskTitle} onChange={e => this.titleChange(e)} />\n              : (\n                <div className=\"head\">\n                  <span className=\"title\">\n                    {taskTitle}\n                  </span>\n                </div>\n              )\n            }\n            {editHead\n              ? (<Button\n                text=\"Save\"\n                onClick={this.toggleElemTitle}\n                className=\"edit-button\"\n              />\n              )\n              : (\n                <Button\n                  text=\"Edit\"\n                  onClick={this.toggleElemTitle}\n                  className=\"edit-button\"\n                />\n              )\n            }\n          </div>\n          <div className=\"overlay-description\">\n            <div className=\"desc-head\">\n              <u>Description</u>\n              {editDesc\n                ? (<Button\n                  text=\"Save\"\n                  onClick={this.toggleElemDesc}\n                  small\n                  className=\"edit-button\"\n                />\n                )\n                : (\n                  <Button\n                    text=\"Edit\"\n                    onClick={this.toggleElemDesc}\n                    small\n                    className=\"edit-button\"\n                  />\n                )\n              }\n            </div>\n            <div className=\"desc\">\n              {editDesc ? <TextArea value={taskDescription} /> : <span>{taskDescription}</span>}\n            </div>\n          </div>\n          <div className=\"comment-container\">\n            <TextArea\n              fill\n              placeholder=\"Put your comments.\"\n            />\n            <Button\n              style={{ marginLeft: '5px' }}\n              text=\"Submit\"\n              intent={Intent.PRIMARY}\n            />\n          </div>\n          <div className=\"comments\">\n            <h3>History</h3>\n            {comments.map((comment) => {\n              return (\n                <div className=\"s-comment\" key={comment.commentId}>\n                  <div>\n                    <img\n                      src={profileIcon}\n                      height=\"45px\"\n                      alt=\"profile or blank profile\"\n                    />\n                  </div>\n                  <div className=\"com-con\">\n                    <div className=\"com-auth\">\n                      <span style={{ fontSize: '16px', fontWeight: 'bold', padding: '3px' }}>{comment.user.userName}</span>\n                      <small>{comment.timestamp}</small>\n                    </div>\n                    <div className=\"com-desc\" style={{ padding: '3px' }}>\n                      {comment.text}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nTaskOverlay.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state, ownprops) => ({ ...state, ...ownprops });\nexport default connect(mapStateToProps, { ...actions })(TaskOverlay);\n"]},"metadata":{},"sourceType":"module"}