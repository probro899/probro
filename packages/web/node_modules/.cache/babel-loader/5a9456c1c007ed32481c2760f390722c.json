{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { updateFormValue } from '../index';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n    var _getState, form, _form$registerForm, firstName, middleName, lastName, email, password, confirmPassword, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(updateFormValue('registerForm', {\n              loading: true\n            }));\n            _getState = getState(), form = _getState.form;\n            _form$registerForm = form.registerForm, firstName = _form$registerForm.firstName, middleName = _form$registerForm.middleName, lastName = _form$registerForm.lastName, email = _form$registerForm.email, password = _form$registerForm.password, confirmPassword = _form$registerForm.confirmPassword;\n\n            if (!(firstName === '' || lastName === '' || email === '' || password === '' || confirmPassword === '')) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", dispatch(updateFormValue('registerForm', {\n              loading: false,\n              error: 'Please fill all the fields.'\n            })));\n\n          case 5:\n            if (!(password !== confirmPassword)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", dispatch(updateFormValue('registerForm', {\n              loading: false,\n              error: \"Password didn't match\"\n            })));\n\n          case 7:\n            _context.prev = 7;\n            _context.next = 10;\n            return axios.post('http://localhost:3000/user/', {\n              firstName: firstName,\n              middleName: middleName,\n              lastName: lastName,\n              email: email,\n              password: password,\n              confirmPassword: confirmPassword\n            });\n\n          case 10:\n            res = _context.sent;\n\n            if (res.status === 200) {\n              dispatch(updateFormValue('registerForm', {\n                firstName: '',\n                middleName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                loading: false,\n                error: null,\n                success: true\n              }));\n            }\n\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](7);\n            dispatch(updateFormValue('registerForm', {\n              loading: false,\n              error: 'Could not Register. Please try again.'\n            }));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 14]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/actions/helper-functions/registerFormHandler.js"],"names":["axios","updateFormValue","dispatch","getState","loading","form","registerForm","firstName","middleName","lastName","email","password","confirmPassword","error","post","res","status","success"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,QAAQ,CAACD,eAAe,CAAC,cAAD,EAAiB;AAAEG,cAAAA,OAAO,EAAE;AAAX,aAAjB,CAAhB,CAAR;AADa,wBAEID,QAAQ,EAFZ,EAELE,IAFK,aAELA,IAFK;AAAA,iCAUTA,IAAI,CAACC,YAVI,EAIXC,SAJW,sBAIXA,SAJW,EAKXC,UALW,sBAKXA,UALW,EAMXC,QANW,sBAMXA,QANW,EAOXC,KAPW,sBAOXA,KAPW,EAQXC,QARW,sBAQXA,QARW,EASXC,eATW,sBASXA,eATW;;AAAA,kBAWTL,SAAS,KAAK,EAAd,IAAoBE,QAAQ,KAAK,EAAjC,IAAuCC,KAAK,KAAK,EAAjD,IAAuDC,QAAQ,KAAK,EAApE,IAA0EC,eAAe,KAAK,EAXrF;AAAA;AAAA;AAAA;;AAAA,6CAYJV,QAAQ,CAACD,eAAe,CAAC,cAAD,EAAiB;AAAEG,cAAAA,OAAO,EAAE,KAAX;AAAkBS,cAAAA,KAAK,EAAE;AAAzB,aAAjB,CAAhB,CAZJ;;AAAA;AAAA,kBAcTF,QAAQ,KAAKC,eAdJ;AAAA;AAAA;AAAA;;AAAA,6CAeJV,QAAQ,CAACD,eAAe,CAAC,cAAD,EAAiB;AAAEG,cAAAA,OAAO,EAAE,KAAX;AAAkBS,cAAAA,KAAK,EAAE;AAAzB,aAAjB,CAAhB,CAfJ;;AAAA;AAAA;AAAA;AAAA,mBAkBOb,KAAK,CAACc,IAAN,CAAW,6BAAX,EAChB;AACEP,cAAAA,SAAS,EAATA,SADF;AAEEC,cAAAA,UAAU,EAAVA,UAFF;AAGEC,cAAAA,QAAQ,EAARA,QAHF;AAIEC,cAAAA,KAAK,EAALA,KAJF;AAKEC,cAAAA,QAAQ,EAARA,QALF;AAMEC,cAAAA,eAAe,EAAfA;AANF,aADgB,CAlBP;;AAAA;AAkBLG,YAAAA,GAlBK;;AA2BX,gBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBd,cAAAA,QAAQ,CAACD,eAAe,CAAC,cAAD,EACtB;AACEM,gBAAAA,SAAS,EAAE,EADb;AAEEC,gBAAAA,UAAU,EAAE,EAFd;AAGEC,gBAAAA,QAAQ,EAAE,EAHZ;AAIEC,gBAAAA,KAAK,EAAE,EAJT;AAKEC,gBAAAA,QAAQ,EAAE,EALZ;AAMEC,gBAAAA,eAAe,EAAE,EANnB;AAOER,gBAAAA,OAAO,EAAE,KAPX;AAQES,gBAAAA,KAAK,EAAE,IART;AASEI,gBAAAA,OAAO,EAAE;AATX,eADsB,CAAhB,CAAR;AAYD;;AAxCU;AAAA;;AAAA;AAAA;AAAA;AA0CXf,YAAAA,QAAQ,CAACD,eAAe,CAAC,cAAD,EAAiB;AAAEG,cAAAA,OAAO,EAAE,KAAX;AAAkBS,cAAAA,KAAK,EAAE;AAAzB,aAAjB,CAAhB,CAAR;;AA1CW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport { updateFormValue } from '../index';\n\nexport default async (dispatch, getState) => {\n  dispatch(updateFormValue('registerForm', { loading: true }));\n  const { form } = getState();\n  const {\n    firstName,\n    middleName,\n    lastName,\n    email,\n    password,\n    confirmPassword,\n  } = form.registerForm;\n  if (firstName === '' || lastName === '' || email === '' || password === '' || confirmPassword === '') {\n    return dispatch(updateFormValue('registerForm', { loading: false, error: 'Please fill all the fields.' }));\n  }\n  if (password !== confirmPassword) {\n    return dispatch(updateFormValue('registerForm', { loading: false, error: \"Password didn't match\" }));\n  }\n  try {\n    const res = await axios.post('http://localhost:3000/user/',\n      {\n        firstName,\n        middleName,\n        lastName,\n        email,\n        password,\n        confirmPassword,\n      });\n    if (res.status === 200) {\n      dispatch(updateFormValue('registerForm',\n        {\n          firstName: '',\n          middleName: '',\n          lastName: '',\n          email: '',\n          password: '',\n          confirmPassword: '',\n          loading: false,\n          error: null,\n          success: true,\n        }));\n    }\n  } catch {\n    dispatch(updateFormValue('registerForm', { loading: false, error: 'Could not Register. Please try again.' }));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}