{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // true if the id in the url doesn't match\n      redirectionError: false,\n      api: {},\n      classId: null\n    };\n\n    _this.onDragEnd = function (result) {\n      var source = result.source,\n          destination = result.destination,\n          draggableId = result.draggableId,\n          type = result.type;\n      var api = _this.state.api;\n\n      if (!destination) {\n        return;\n      } // column moving around\n\n\n      if (type === 'column') {\n        console.log(destination, draggableId);\n        api.updateBoardColumn([{\n          position: destination.index\n        }, {\n          id: draggableId\n        }]);\n        return;\n      } // const start = columns[source.droppableId];\n      // const finish = columns[destination.droppableId];\n      // if (start === finish) {\n      //   const newTaskIds = Array.from(start.taskIds);\n      //   newTaskIds.splice(source.index, 1);\n      //   newTaskIds.splice(destination.index, 0, draggableId);\n      //   const newColumn = {\n      //     ...start,\n      //     taskIds: newTaskIds,\n      //   };\n      //   updateClassValue('columns', { ...columns, [newColumn.id]: newColumn });\n      //   return;\n      // }\n      // // moving from one column to another\n      // const startTaskIds = Array.from(start.taskIds);\n      // const finishTaskIds = Array.from(finish.taskIds);\n      // startTaskIds.splice(source.index, 1);\n      // const newStart = {\n      //   ...start,\n      //   taskIds: startTaskIds,\n      // };\n      // finishTaskIds.splice(destination.index, 0, draggableId);\n      // const newFinish = {\n      //   ...finish,\n      //   taskIds: finishTaskIds,\n      // };\n      // updateClassValue('columns', { ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });\n\n    };\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this$props, match, account, api;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, match = _this$props.match, account = _this$props.account;\n                _context.next = 3;\n                return client.scope('Mentee');\n\n              case 3:\n                api = _context.sent;\n\n                // checking if the user's sessionid is real\n                if (match.params.id === account.sessionId) {\n                  this.setState({\n                    api: api,\n                    // eslint-disable-next-line radix\n                    classId: parseInt(match.params.classId)\n                  });\n                } else {\n                  this.setState({\n                    redirectionError: true\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classId = this.state.classId;\n      var columns = this.props.columns;\n      var redirectionError = this.state.redirectionError;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, redirectionError && React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"classWrapper\",\n        style: {\n          height: window.innerHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }), columns.map(function (column, index) {\n          if (column.boardId === classId) {\n            return React.createElement(Column, {\n              key: column.id,\n              column: column,\n              columnId: column.id,\n              index: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108\n              },\n              __self: this\n            });\n          }\n        }), provided.placeholder, React.createElement(NewColumn, {\n          classId: classId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }));\n      }))), React.createElement(TaskOverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var database = state.database,\n      account = state.account;\n  var columns = Object.values(database.BoardColumn.byId) // eslint-disable-next-line radix\n  .sort(sorting);\n  return {\n    account: account,\n    columns: columns\n  };\n};\n\nexport default connect(mapStateToProps)(Classes);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js"],"names":["React","Component","Redirect","connect","DragDropContext","Droppable","Column","NewColumn","TaskOverlay","Navbar","client","sorting","Classes","state","redirectionError","api","classId","onDragEnd","result","source","destination","draggableId","type","console","log","updateBoardColumn","position","index","id","props","match","account","scope","params","sessionId","setState","parseInt","columns","height","window","innerHeight","provided","droppableProps","innerRef","map","column","boardId","placeholder","mapStateToProps","database","Object","values","BoardColumn","byId","sort"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\n\nclass Classes extends Component {\n  state = {\n    // true if the id in the url doesn't match\n    redirectionError: false,\n    api: {},\n    classId: null,\n  };\n\n  async componentWillMount() {\n    const { match, account } = this.props;\n    const api = await client.scope('Mentee');\n    // checking if the user's sessionid is real\n    if (match.params.id === account.sessionId) {\n      this.setState({\n        api,\n        // eslint-disable-next-line radix\n        classId: parseInt(match.params.classId),\n      });\n    } else {\n      this.setState({\n        redirectionError: true,\n      });\n    }\n  }\n\n  onDragEnd = (result) => {\n    const { source, destination, draggableId, type } = result;\n    const { api } = this.state;\n    if (!destination) {\n      return;\n    }\n    // column moving around\n    if (type === 'column') {\n      console.log(destination, draggableId);\n      api.updateBoardColumn([{ position: destination.index }, { id: draggableId }]);\n      return;\n    }\n    // const start = columns[source.droppableId];\n    // const finish = columns[destination.droppableId];\n\n    // if (start === finish) {\n    //   const newTaskIds = Array.from(start.taskIds);\n    //   newTaskIds.splice(source.index, 1);\n    //   newTaskIds.splice(destination.index, 0, draggableId);\n    //   const newColumn = {\n    //     ...start,\n    //     taskIds: newTaskIds,\n    //   };\n    //   updateClassValue('columns', { ...columns, [newColumn.id]: newColumn });\n    //   return;\n    // }\n    // // moving from one column to another\n    // const startTaskIds = Array.from(start.taskIds);\n    // const finishTaskIds = Array.from(finish.taskIds);\n    // startTaskIds.splice(source.index, 1);\n    // const newStart = {\n    //   ...start,\n    //   taskIds: startTaskIds,\n    // };\n    // finishTaskIds.splice(destination.index, 0, draggableId);\n    // const newFinish = {\n    //   ...finish,\n    //   taskIds: finishTaskIds,\n    // };\n    // updateClassValue('columns', { ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });\n  }\n\n  render() {\n    const { classId } = this.state;\n    const { columns } = this.props;\n    const { redirectionError } = this.state;\n    return (\n      <div>\n        {redirectionError && <Redirect to=\"/\" />}\n        <Navbar />\n        <div\n          className=\"classWrapper\"\n          style={{ height: window.innerHeight }}\n        >\n          <DragDropContext\n            onDragEnd={this.onDragEnd}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              { provided => (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {\n                    columns.map((column, index) => {\n                      if (column.boardId === classId) {\n                        return (\n                          <Column\n                            key={column.id}\n                            column={column}\n                            columnId={column.id}\n                            index={index}\n                          />\n                        );\n                      }\n                    })\n                  }\n                  {provided.placeholder}\n                  <NewColumn classId={classId} />\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <TaskOverlay />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { database, account } = state;\n  const columns = Object.values(database.BoardColumn.byId)\n    // eslint-disable-next-line radix\n    .sort(sorting);\n  return { account, columns };\n};\nexport default connect(mapStateToProps)(Classes);\n"]},"metadata":{},"sourceType":"module"}