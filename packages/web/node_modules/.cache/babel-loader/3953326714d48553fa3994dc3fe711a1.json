{"ast":null,"code":"import _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/Input.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup, Icon, Label, Tooltip, Button, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\n\nvar Lock = function Lock(iconName) {\n  if (iconName === 'Search') {\n    return {\n      leftIcon: React.createElement(Icon, {\n        icon: IconNames.SEARCH,\n        iconSize: Icon.SIZE_LARGE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }),\n      rightIcon: null\n    };\n  }\n\n  if (iconName === 'Lock') {\n    var rightIcon = React.createElement(Button, {\n      icon: \"lock\",\n      intent: Intent.WARNING // onClick={this.handleLockClick}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    });\n    return {\n      leftIcon: null,\n      rightIcon: {\n        rightIcon: rightIcon\n      }\n    };\n  }\n\n  return {\n    leftIcon: null,\n    rightIcon: null\n  };\n};\n\nvar CustomInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomInput, _React$Component);\n\n  function CustomInput(props) {\n    var _this;\n\n    _classCallCheck(this, CustomInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomInput).call(this, props));\n    _this.state = {\n      hide: true\n    };\n    return _this;\n  }\n\n  _createClass(CustomInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          iconName = _this$props.iconName,\n          class_ = _this$props.class_,\n          label_ = _this$props.label_;\n\n      var _Lock = Lock(iconName),\n          leftIcon = _Lock.leftIcon,\n          rightIcon = _Lock.rightIcon;\n\n      return React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"label-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, label_), React.createElement(InputGroup, {\n        placeholder: placeholder,\n        className: class_,\n        leftIcon: leftIcon,\n        rightElement: rightIcon,\n        large: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CustomInput;\n}(React.Component);\n\nCustomInput.defaultProps = {\n  class_: 'input'\n};\nCustomInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  iconName: PropTypes.string.isRequired,\n  class_: PropTypes.string,\n  label_: PropTypes.string.isRequired\n};\nexport default CustomInput;","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/Input.js"],"names":["React","PropTypes","InputGroup","Icon","Label","Tooltip","Button","Intent","IconNames","Lock","iconName","leftIcon","SEARCH","SIZE_LARGE","rightIcon","WARNING","CustomInput","props","state","hide","placeholder","class_","label_","Component","defaultProps","propTypes","string","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmDC,MAAnD,QAAiE,mBAAjE;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,QAAD,EAAc;AACzB,MAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACzB,WACE;AAAEC,MAAAA,QAAQ,EAAE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEH,SAAS,CAACI,MAAtB;AAA8B,QAAA,QAAQ,EAAET,IAAI,CAACU,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAZ;AAAyEC,MAAAA,SAAS,EAAE;AAApF,KADF;AAGD;;AACD,MAAIJ,QAAQ,KAAK,MAAjB,EAAyB;AACvB,QAAMI,SAAS,GACb,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAEP,MAAM,CAACQ,OAFjB,CAGE;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOA,WACE;AAAEJ,MAAAA,QAAQ,EAAE,IAAZ;AAAkBG,MAAAA,SAAS,EAAE;AAAEA,QAAAA,SAAS,EAATA;AAAF;AAA7B,KADF;AAGD;;AACD,SAAQ;AAAEH,IAAAA,QAAQ,EAAE,IAAZ;AAAkBG,IAAAA,SAAS,EAAE;AAA7B,GAAR;AACD,CAnBD;;IAqBME,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAFiB;AAGlB;;;;6BAEQ;AAAA,wBAC2C,KAAKF,KADhD;AAAA,UACCG,WADD,eACCA,WADD;AAAA,UACcV,QADd,eACcA,QADd;AAAA,UACwBW,MADxB,eACwBA,MADxB;AAAA,UACgCC,MADhC,eACgCA,MADhC;;AAAA,kBAEyBb,IAAI,CAACC,QAAD,CAF7B;AAAA,UAECC,QAFD,SAECA,QAFD;AAAA,UAEWG,SAFX,SAEWA,SAFX;;AAGP,aACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BQ,MAA9B,CADF,EAEE,oBAAC,UAAD;AACE,QAAA,WAAW,EAAEF,WADf;AAEE,QAAA,SAAS,EAAEC,MAFb;AAGE,QAAA,QAAQ,EAAEV,QAHZ;AAIE,QAAA,YAAY,EAAEG,SAJhB;AAKE,QAAA,KAAK,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAYD;;;;EArBuBd,KAAK,CAACuB,S;;AAuBhCP,WAAW,CAACQ,YAAZ,GAA2B;AACzBH,EAAAA,MAAM,EAAE;AADiB,CAA3B;AAGAL,WAAW,CAACS,SAAZ,GAAwB;AACtBL,EAAAA,WAAW,EAAEnB,SAAS,CAACyB,MAAV,CAAiBC,UADR;AAEtBjB,EAAAA,QAAQ,EAAET,SAAS,CAACyB,MAAV,CAAiBC,UAFL;AAGtBN,EAAAA,MAAM,EAAEpB,SAAS,CAACyB,MAHI;AAItBJ,EAAAA,MAAM,EAAErB,SAAS,CAACyB,MAAV,CAAiBC;AAJH,CAAxB;AAMA,eAAeX,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup, Icon, Label, Tooltip, Button, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\n\nconst Lock = (iconName) => {\n  if (iconName === 'Search') {\n    return (\n      { leftIcon: <Icon icon={IconNames.SEARCH} iconSize={Icon.SIZE_LARGE} />, rightIcon: null }\n    );\n  }\n  if (iconName === 'Lock') {\n    const rightIcon = (\n      <Button\n        icon=\"lock\"\n        intent={Intent.WARNING}\n        // onClick={this.handleLockClick}\n      />);\n\n    return (\n      { leftIcon: null, rightIcon: { rightIcon } }\n    );\n  }\n  return ({ leftIcon: null, rightIcon: null });\n};\n\nclass CustomInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hide: true };\n  }\n\n  render() {\n    const { placeholder, iconName, class_, label_ } = this.props;\n    const { leftIcon, rightIcon } = Lock(iconName);\n    return (\n      <Label>\n        <span className=\"label-text\">{label_}</span>\n        <InputGroup\n          placeholder={placeholder}\n          className={class_}\n          leftIcon={leftIcon}\n          rightElement={rightIcon}\n          large\n        />\n      </Label>\n    );\n  }\n}\nCustomInput.defaultProps = {\n  class_: 'input',\n};\nCustomInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  iconName: PropTypes.string.isRequired,\n  class_: PropTypes.string,\n  label_: PropTypes.string.isRequired,\n};\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}