{"ast":null,"code":"import _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport posSorting from '../utility-functions';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // true if the id in the url doesn't match\n      redirectionError: false,\n      api: {},\n      classId: null,\n      columns: [],\n      tasks: [],\n      comments: [],\n      attachments: [],\n      descriptions: [],\n      taskOverlayIsOpen: false,\n      // the task id contained in the overlay\n      taskIdInOverlay: 0\n    };\n\n    _this.onDragEnd =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(result) {\n        var source, destination, draggableId, type, _this$state, api, columns, tasks, columnId, _newColumns, column, dropable, _dragable, _newColumns2, newColumn, newTasks, _newTask, sourceDropable, destinationDropable, dragable, newColumns, fromColumn, toColumn, fromTasks, toTasks, newTask;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                source = result.source, destination = result.destination, draggableId = result.draggableId, type = result.type;\n                _this$state = _this.state, api = _this$state.api, columns = _this$state.columns, tasks = _this$state.tasks;\n\n                if (destination) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                if (!(type === 'column')) {\n                  _context.next = 18;\n                  break;\n                }\n\n                if (!(source.index === destination.index)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                columnId = Number(draggableId.split('column')[1]);\n                _newColumns = columns;\n                column = {};\n                columns.map(function (obj) {\n                  if (obj.id === columnId) {\n                    column = obj;\n                  }\n                }); // testing for the swapping either in start, middle or end.\n\n                if (destination.index === 0) {\n                  column.position = columns[0].position / 2;\n                } else if (destination.index === columns.length - 1) {\n                  column.position = columns[destination.index].position + 16384;\n                } else {\n                  if (source.index > destination.index) {\n                    column.position = (columns[destination.index - 1].position + columns[destination.index].position) / 2;\n                  }\n\n                  if (source.index < destination.index) {\n                    column.position = (columns[destination.index].position + columns[destination.index + 1].position) / 2;\n                  }\n                }\n\n                _newColumns.splice(source.index, 1);\n\n                _newColumns.splice(destination.index, 0, column);\n\n                _this.setState({\n                  columns: _newColumns\n                });\n\n                _context.next = 17;\n                return api.updateBoardColumn([{\n                  position: column.position,\n                  timeStamp: Date.now()\n                }, {\n                  id: columnId\n                }]);\n\n              case 17:\n                return _context.abrupt(\"return\");\n\n              case 18:\n                if (!(source.droppableId === destination.droppableId)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                dropable = Number(source.droppableId);\n                _dragable = Number(draggableId.split('task')[1]);\n                _newColumns2 = columns;\n                newColumn = {};\n                newTasks = [];\n                columns.map(function (obj) {\n                  if (obj.id === dropable) {\n                    newColumn = obj;\n                    newTasks = obj.tasks;\n                  }\n                });\n                _newTask = {};\n                newTasks.map(function (o) {\n                  if (o.id === _dragable) {\n                    _newTask = o;\n                  }\n                });\n\n                if (destination.index === 0) {\n                  _newTask.position = newTasks[0].position / 2;\n                } else if (destination.index === newTasks.length - 1) {\n                  _newTask.position = newTasks[destination.index].position + 16384;\n                } else {\n                  if (source.index > destination.index) {\n                    _newTask.position = (newTasks[destination.index - 1].position + newTasks[destination.index].position) / 2;\n                  }\n\n                  if (source.index < destination.index) {\n                    _newTask.position = (newTasks[destination.index].position + newTasks[destination.index + 1].position) / 2;\n                  }\n                }\n\n                newTasks.splice(source.index, 1);\n                newTasks.splice(destination.index, 0, _newTask);\n                newColumn.tasks = newTasks;\n\n                _newColumns2.splice(dropable, 1);\n\n                _newColumns2.splice(dropable, 0, newColumn);\n\n                _this.setState({\n                  columns: _newColumns2\n                });\n\n                _context.next = 36;\n                return api.updateBoardColumnCard([{\n                  position: _newTask.position,\n                  timestamp: Date.now()\n                }, {\n                  id: _dragable\n                }]);\n\n              case 36:\n                return _context.abrupt(\"return\");\n\n              case 37:\n                // cards movement within the column ends here\n                // inter column task move using state\n                sourceDropable = Number(source.droppableId);\n                destinationDropable = Number(destination.droppableId);\n                dragable = Number(draggableId.split('task')[1]);\n                newColumns = columns;\n                fromColumn = {};\n                toColumn = {};\n                newColumns.map(function (obj) {\n                  if (obj.id === sourceDropable) {\n                    fromColumn = obj;\n                  }\n\n                  if (obj.id === destinationDropable) {\n                    toColumn = obj;\n                  }\n                });\n                fromTasks = fromColumn.tasks;\n                toTasks = toColumn.tasks;\n                fromTasks.map(function (obj) {\n                  if (obj.id === dragable) {\n                    newTask = obj;\n                  }\n                });\n                fromTasks.splice(source.index, 1);\n\n                if (destination.index === 0) {\n                  if (toTasks.length !== 0) {\n                    newTask.position = toTasks[0].position / 2;\n                  } else {\n                    newTask.position = 16384;\n                  }\n                } else if (destination.index === toTasks.length - 2) {\n                  newTask.position = toTasks[destination.index].position + 16384;\n                } else {\n                  newTask.position = (toTasks[destination.index - 1].position + toTasks[destination.index].position) / 2;\n                }\n\n                toTasks.splice(destination.index, 0, newTask);\n                toColumn.tasks = toTasks;\n                fromColumn.tasks = fromTasks;\n                newColumns.splice(sourceDropable, 1);\n                newColumns.splice(sourceDropable, 0, fromColumn);\n                newColumns.splice(destinationDropable, 1);\n                newColumns.splice(destinationDropable, 0, toColumn);\n\n                _this.setState({\n                  columns: newColumns\n                });\n\n                _context.next = 59;\n                return api.updateBoardColumnCard([{\n                  position: newTask.position,\n                  timeStamp: Date.now(),\n                  boardColumnId: destinationDropable\n                }, {\n                  id: dragable\n                }]);\n\n              case 59:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.toggleTaskOverlay = function (id) {\n      var taskOverlayIsOpen = _this.state.taskOverlayIsOpen;\n\n      _this.setState({\n        taskIdInOverlay: id,\n        taskOverlayIsOpen: !taskOverlayIsOpen\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          account = _this$props.account,\n          match = _this$props.match;\n      client.scope('Mentee').then(function (result) {\n        // checking if the user's sessionid is real\n        if (match.params.id === account.sessionId) {\n          _this2.setState({\n            api: result,\n            classId: parseInt(match.params.classId, 10)\n          }); // this is to ensure the props loaded in the component\n\n\n          _this2.componentWillReceiveProps(_this2.props);\n        } else {\n          _this2.setState({\n            redirectionError: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var tasks = nextProps.tasks,\n          columns = nextProps.columns,\n          comments = nextProps.comments,\n          attachments = nextProps.attachments,\n          descriptions = nextProps.descriptions;\n      var wholeColumns = [];\n      Object.values(columns.byId).map(function (obj) {\n        var column = _objectSpread({}, obj);\n\n        var task = [];\n        Object.values(tasks.byId).map(function (ob) {\n          if (ob.boardColumnId === obj.id) {\n            task.push(ob);\n          }\n        });\n        task.sort(posSorting);\n        column.tasks = task;\n        wholeColumns.push(column);\n      });\n      this.setState({\n        tasks: Object.values(tasks.byId),\n        columns: wholeColumns.sort(posSorting),\n        comments: Object.values(comments.byId),\n        attachments: Object.values(attachments.byId),\n        descriptions: Object.values(descriptions.byId)\n      });\n    } // all the drag and drop will be handled here\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          classId = _this$state2.classId,\n          columns = _this$state2.columns,\n          tasks = _this$state2.tasks,\n          redirectionError = _this$state2.redirectionError,\n          api = _this$state2.api,\n          taskIdInOverlay = _this$state2.taskIdInOverlay,\n          taskOverlayIsOpen = _this$state2.taskOverlayIsOpen,\n          comments = _this$state2.comments,\n          attachments = _this$state2.attachments,\n          descriptions = _this$state2.descriptions;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, redirectionError && React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"classWrapper\",\n        style: {\n          height: window.innerHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }), columns.map(function (column, index) {\n          if (column.boardId === classId) {\n            return React.createElement(Column, {\n              key: column.id,\n              column: column,\n              columnId: column.id,\n              index: index,\n              api: api // passing it for the task overlay open\n              ,\n              onTaskClick: _this3.toggleTaskOverlay,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 274\n              },\n              __self: this\n            });\n          }\n        }), provided.placeholder, React.createElement(NewColumn, {\n          classId: classId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }));\n      }))), React.createElement(TaskOverlay, {\n        isOpen: taskOverlayIsOpen,\n        taskId: taskIdInOverlay,\n        tasks: tasks,\n        onClose: this.toggleTaskOverlay,\n        comments: comments,\n        attachments: attachments,\n        descriptions: descriptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var database = state.database,\n      account = state.account;\n  var columns = database.BoardColumn;\n  var tasks = database.BoardColumnCard;\n  var comments = database.BoardColumnCardComment;\n  var descriptions = database.BoardColumnCardDescription;\n  var attachments = database.BoardColumnCardAttachment;\n  return {\n    account: account,\n    columns: columns,\n    tasks: tasks,\n    comments: comments,\n    descriptions: descriptions,\n    attachments: attachments\n  };\n};\n\nexport default connect(mapStateToProps)(Classes);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js"],"names":["React","Component","Redirect","connect","PropTypes","DragDropContext","Droppable","Column","NewColumn","TaskOverlay","Navbar","client","posSorting","Classes","state","redirectionError","api","classId","columns","tasks","comments","attachments","descriptions","taskOverlayIsOpen","taskIdInOverlay","onDragEnd","result","source","destination","draggableId","type","index","columnId","Number","split","newColumns","column","map","obj","id","position","length","splice","setState","updateBoardColumn","timeStamp","Date","now","droppableId","dropable","dragable","newColumn","newTasks","newTask","o","updateBoardColumnCard","timestamp","sourceDropable","destinationDropable","fromColumn","toColumn","fromTasks","toTasks","boardColumnId","toggleTaskOverlay","props","account","match","scope","then","params","sessionId","parseInt","componentWillReceiveProps","nextProps","wholeColumns","Object","values","byId","task","ob","push","sort","height","window","innerHeight","provided","droppableProps","innerRef","boardId","placeholder","propTypes","objectOf","any","isRequired","mapStateToProps","database","BoardColumn","BoardColumnCard","BoardColumnCardComment","BoardColumnCardDescription","BoardColumnCardAttachment"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport posSorting from '../utility-functions';\n\n\nclass Classes extends Component {\n  state = {\n    // true if the id in the url doesn't match\n    redirectionError: false,\n    api: {},\n    classId: null,\n    columns: [],\n    tasks: [],\n    comments: [],\n    attachments: [],\n    descriptions: [],\n    taskOverlayIsOpen: false,\n    // the task id contained in the overlay\n    taskIdInOverlay: 0,\n  };\n\n  componentWillMount() {\n    const {\n      account,\n      match,\n    } = this.props;\n    client.scope('Mentee').then((result) => {\n      // checking if the user's sessionid is real\n      if (match.params.id === account.sessionId) {\n        this.setState({\n          api: result,\n          classId: parseInt(match.params.classId, 10),\n        });\n        // this is to ensure the props loaded in the component\n        this.componentWillReceiveProps(this.props);\n      } else {\n        this.setState({\n          redirectionError: true,\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      tasks,\n      columns,\n      comments,\n      attachments,\n      descriptions,\n    } = nextProps;\n    const wholeColumns = [];\n    Object.values(columns.byId).map((obj) => {\n      const column = { ...obj };\n      const task = [];\n      Object.values(tasks.byId).map((ob) => {\n        if (ob.boardColumnId === obj.id) {\n          task.push(ob);\n        }\n      });\n      task.sort(posSorting);\n      column.tasks = task;\n      wholeColumns.push(column);\n    });\n    this.setState({\n      tasks: Object.values(tasks.byId),\n      columns: wholeColumns.sort(posSorting),\n      comments: Object.values(comments.byId),\n      attachments: Object.values(attachments.byId),\n      descriptions: Object.values(descriptions.byId),\n    });\n  }\n\n  // all the drag and drop will be handled here\n  onDragEnd = async (result) => {\n    const { source, destination, draggableId, type } = result;\n    const { api, columns, tasks } = this.state;\n    if (!destination) {\n      return;\n    }\n    // column moving around\n    if (type === 'column') {\n      if (source.index === destination.index) {\n        return;\n      }\n      const columnId = Number(draggableId.split('column')[1]);\n      const newColumns = columns;\n      let column = {};\n      columns.map((obj) => {\n        if (obj.id === columnId) {\n          column = obj;\n        }\n      });\n      // testing for the swapping either in start, middle or end.\n      if (destination.index === 0) {\n        column.position = columns[0].position / 2;\n      } else if (destination.index === columns.length - 1) {\n        column.position = columns[destination.index].position + 16384;\n      } else {\n        if (source.index > destination.index) {\n          column.position = (columns[destination.index - 1].position\n            + columns[destination.index].position) / 2;\n        }\n        if (source.index < destination.index) {\n          column.position = (columns[destination.index].position\n            + columns[destination.index + 1].position) / 2;\n        }\n      }\n      newColumns.splice(source.index, 1);\n      newColumns.splice(destination.index, 0, column);\n      this.setState({\n        columns: newColumns,\n      });\n      await api.updateBoardColumn([\n        { position: column.position, timeStamp: Date.now() }, { id: columnId }]);\n      return;\n    }\n    // finished column moving around here\n    // cards movement within the column\n    if (source.droppableId === destination.droppableId) {\n      const dropable = Number(source.droppableId);\n      const dragable = Number(draggableId.split('task')[1]);\n      const newColumns = columns;\n      let newColumn = {};\n      let newTasks = [];\n      columns.map((obj) => {\n        if (obj.id === dropable) {\n          newColumn = obj;\n          newTasks = obj.tasks;\n        }\n      });\n      let newTask = {};\n      newTasks.map((o) => {\n        if (o.id === dragable) {\n          newTask = o;\n        }\n      });\n      if (destination.index === 0) {\n        newTask.position = newTasks[0].position / 2;\n      } else if (destination.index === newTasks.length - 1) {\n        newTask.position = newTasks[destination.index].position + 16384;\n      } else {\n        if (source.index > destination.index) {\n          newTask.position = (newTasks[destination.index - 1].position\n            + newTasks[destination.index].position) / 2;\n        }\n        if (source.index < destination.index) {\n          newTask.position = (newTasks[destination.index].position\n            + newTasks[destination.index + 1].position) / 2;\n        }\n      }\n      newTasks.splice(source.index, 1);\n      newTasks.splice(destination.index, 0, newTask);\n      newColumn.tasks = newTasks;\n      newColumns.splice(dropable, 1);\n      newColumns.splice(dropable, 0, newColumn);\n      this.setState({\n        columns: newColumns,\n      });\n      await api.updateBoardColumnCard([\n        { position: newTask.position, timestamp: Date.now() }, { id: dragable }]);\n      return;\n    }\n    // cards movement within the column ends here\n    // inter column task move using state\n    const sourceDropable = Number(source.droppableId);\n    const destinationDropable = Number(destination.droppableId);\n    const dragable = Number(draggableId.split('task')[1]);\n    const newColumns = columns;\n    let fromColumn = {};\n    let toColumn = {};\n    newColumns.map((obj) => {\n      if (obj.id === sourceDropable) {\n        fromColumn = obj;\n      }\n      if (obj.id === destinationDropable) {\n        toColumn = obj;\n      }\n    });\n    const fromTasks = fromColumn.tasks;\n    const toTasks = toColumn.tasks;\n    let newTask;\n    fromTasks.map((obj) => {\n      if (obj.id === dragable) {\n        newTask = obj;\n      }\n    });\n    fromTasks.splice(source.index, 1);\n    if (destination.index === 0) {\n      if (toTasks.length !== 0) {\n        newTask.position = toTasks[0].position / 2;\n      } else {\n        newTask.position = 16384;\n      }\n    } else if (destination.index === toTasks.length - 2) {\n      newTask.position = toTasks[destination.index].position + 16384;\n    } else {\n      newTask.position = (toTasks[destination.index - 1].position\n        + toTasks[destination.index].position) / 2;\n    }\n    toTasks.splice(destination.index, 0, newTask);\n    toColumn.tasks = toTasks;\n    fromColumn.tasks = fromTasks;\n    newColumns.splice(sourceDropable, 1);\n    newColumns.splice(sourceDropable, 0, fromColumn);\n    newColumns.splice(destinationDropable, 1);\n    newColumns.splice(destinationDropable, 0, toColumn);\n    this.setState({\n      columns: newColumns,\n    });\n    await api.updateBoardColumnCard([\n      {\n        position: newTask.position,\n        timeStamp: Date.now(),\n        boardColumnId: destinationDropable,\n      },\n      { id: dragable },\n    ]);\n  }\n\n  toggleTaskOverlay = (id) => {\n    const { taskOverlayIsOpen } = this.state;\n    this.setState({\n      taskIdInOverlay: id,\n      taskOverlayIsOpen: !taskOverlayIsOpen,\n    });\n  }\n\n  render() {\n    const {\n      classId,\n      columns,\n      tasks,\n      redirectionError,\n      api,\n      taskIdInOverlay,\n      taskOverlayIsOpen,\n      comments,\n      attachments,\n      descriptions,\n    } = this.state;\n    return (\n      <div>\n        {redirectionError && <Redirect to=\"/\" />}\n        <Navbar />\n        <div\n          className=\"classWrapper\"\n          style={{ height: window.innerHeight }}\n        >\n          <DragDropContext\n            onDragEnd={this.onDragEnd}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              { provided => (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {\n                    columns.map((column, index) => {\n                      if (column.boardId === classId) {\n                        return (\n                          <Column\n                            key={column.id}\n                            column={column}\n                            columnId={column.id}\n                            index={index}\n                            api={api}\n                            // passing it for the task overlay open\n                            onTaskClick={this.toggleTaskOverlay}\n                          />\n                        );\n                      }\n                    })\n                  }\n                  {provided.placeholder}\n                  <NewColumn classId={classId} />\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <TaskOverlay\n          isOpen={taskOverlayIsOpen}\n          taskId={taskIdInOverlay}\n          tasks={tasks}\n          onClose={this.toggleTaskOverlay}\n          comments={comments}\n          attachments={attachments}\n          descriptions={descriptions}\n        />\n      </div>\n    );\n  }\n}\n\nClasses.propTypes = {\n  tasks: PropTypes.objectOf(PropTypes.any).isRequired,\n  columns: PropTypes.objectOf(PropTypes.any).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  account: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { database, account } = state;\n  const columns = database.BoardColumn;\n  const tasks = database.BoardColumnCard;\n  const comments = database.BoardColumnCardComment;\n  const descriptions = database.BoardColumnCardDescription;\n  const attachments = database.BoardColumnCardAttachment;\n  return {\n    account,\n    columns,\n    tasks,\n    comments,\n    descriptions,\n    attachments,\n  };\n};\nexport default connect(mapStateToProps)(Classes);\n"]},"metadata":{},"sourceType":"module"}