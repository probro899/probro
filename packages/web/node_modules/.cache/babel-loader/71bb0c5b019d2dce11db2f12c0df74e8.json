{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { updateFormValue } from '../index';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n    var _getState, form, _form$loginForm, email, password, res, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('hello');\n            dispatch(updateFormValue('login', {\n              loading: true\n            }));\n            _getState = getState(), form = _getState.form;\n            _form$loginForm = form.loginForm, email = _form$loginForm.email, password = _form$loginForm.password;\n            _context.prev = 4;\n            _context.next = 7;\n            return axios.post('http://localhost:3000/user', {\n              email: email,\n              password: password\n            });\n\n          case 7:\n            res = _context.sent;\n            data = res.data;\n\n            if (res.status === 200 && data.token) {\n              dispatch(updateFormValue('login', {\n                loading: false,\n                error: null,\n                success: true,\n                email: '',\n                password: ''\n              }));\n              sessionStorage.setItem('USER_ID', data.id);\n              sessionStorage.setItem('SESSION_ID', data.token);\n              sessionStorage.setItem('EMAIL', data.email);\n              sessionStorage.setItem('USER_TYPE', data.type);\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](4);\n            dispatch(updateFormValue('login', {\n              loading: false,\n              error: 'Invalid username/password'\n            }));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[4, 12]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/actions/helper-functions/loginFormHandler.js"],"names":["axios","updateFormValue","dispatch","getState","console","log","loading","form","loginForm","email","password","post","res","data","status","token","error","success","sessionStorage","setItem","id","type"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAH,YAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAAEK,cAAAA,OAAO,EAAE;AAAX,aAAV,CAAhB,CAAR;AAFa,wBAGIH,QAAQ,EAHZ,EAGLI,IAHK,aAGLA,IAHK;AAAA,8BAIeA,IAAI,CAACC,SAJpB,EAILC,KAJK,mBAILA,KAJK,EAIEC,QAJF,mBAIEA,QAJF;AAAA;AAAA;AAAA,mBAMOV,KAAK,CAACW,IAAN,CAAW,4BAAX,EAAyC;AAAEF,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,QAAQ,EAARA;AAAT,aAAzC,CANP;;AAAA;AAMLE,YAAAA,GANK;AAOHC,YAAAA,IAPG,GAOMD,GAPN,CAOHC,IAPG;;AAQX,gBAAID,GAAG,CAACE,MAAJ,KAAe,GAAf,IAAsBD,IAAI,CAACE,KAA/B,EAAsC;AACpCb,cAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAChCK,gBAAAA,OAAO,EAAE,KADuB;AAEhCU,gBAAAA,KAAK,EAAE,IAFyB;AAGhCC,gBAAAA,OAAO,EAAE,IAHuB;AAIhCR,gBAAAA,KAAK,EAAE,EAJyB;AAKhCC,gBAAAA,QAAQ,EAAE;AALsB,eAAV,CAAhB,CAAR;AAOAQ,cAAAA,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkCN,IAAI,CAACO,EAAvC;AACAF,cAAAA,cAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqCN,IAAI,CAACE,KAA1C;AACAG,cAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCN,IAAI,CAACJ,KAArC;AACAS,cAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCN,IAAI,CAACQ,IAAzC;AACD;;AApBU;AAAA;;AAAA;AAAA;AAAA;AAsBXnB,YAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAAEK,cAAAA,OAAO,EAAE,KAAX;AAAkBU,cAAAA,KAAK,EAAE;AAAzB,aAAV,CAAhB,CAAR;;AAtBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport { updateFormValue } from '../index';\n\nexport default async (dispatch, getState) => {\n  console.log('hello')\n  dispatch(updateFormValue('login', { loading: true }));\n  const { form } = getState();\n  const { email, password } = form.loginForm;\n  try {\n    const res = await axios.post('http://localhost:3000/user', { email, password });\n    const { data } = res;\n    if (res.status === 200 && data.token) {\n      dispatch(updateFormValue('login', {\n        loading: false,\n        error: null,\n        success: true,\n        email: '',\n        password: '',\n      }));\n      sessionStorage.setItem('USER_ID', data.id);\n      sessionStorage.setItem('SESSION_ID', data.token);\n      sessionStorage.setItem('EMAIL', data.email);\n      sessionStorage.setItem('USER_TYPE', data.type);\n    }\n  } catch {\n    dispatch(updateFormValue('login', { loading: false, error: 'Invalid username/password' }));\n  }\n  // console.log(res);\n};"]},"metadata":{},"sourceType":"module"}