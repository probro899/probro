{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\nvar Classes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Classes, _Component);\n\n  function Classes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Classes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Classes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // true if the id in the url doesn't match\n      redirectionError: false,\n      api: {},\n      classId: null,\n      columns: {},\n      tasks: {}\n    };\n\n    _this.onDragEnd =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(result) {\n        var source, destination, draggableId, type, _this$state, api, columns, newColumn;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                source = result.source, destination = result.destination, draggableId = result.draggableId, type = result.type;\n                _this$state = _this.state, api = _this$state.api, columns = _this$state.columns;\n\n                if (destination) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                if (!(type === 'column')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                // updating the state prior for efficient change\n                newColumn = columns[parseInt(draggableId, 10)];\n                newColumn.position = destination.index;\n                newColumn.timestamp = Date.now();\n\n                _this.setState({\n                  columns: {\n                    allIds: columns.allIds,\n                    byId: _objectSpread({}, columns.byId, _defineProperty({}, parseInt(draggableId, 10), newColumn))\n                  }\n                });\n\n                _context.next = 11;\n                return api.updateBoardColumn([{\n                  position: destination.index,\n                  timestamp: Date.now()\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 11:\n                return _context.abrupt(\"return\");\n\n              case 12:\n                if (!(source.droppableId === destination.droppableId)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 15;\n                return api.updateBoardColumnCard([{\n                  position: destination.index,\n                  timestamp: Date.now()\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 15:\n                return _context.abrupt(\"return\");\n\n              case 16:\n                _context.next = 18;\n                return api.updateBoardColumnCard([{\n                  position: destination.index,\n                  timestamp: Date.now(),\n                  boardColumnId: parseInt(destination.droppableId, 10)\n                }, {\n                  id: parseInt(draggableId, 10)\n                }]);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Classes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          match = _this$props.match,\n          account = _this$props.account;\n      client.scope('Mentee').then(function (result) {\n        // checking if the user's sessionid is real\n        if (match.params.id === account.sessionId) {\n          _this2.setState({\n            api: result,\n            classId: parseInt(match.params.classId, 10)\n          });\n\n          _this2.componentWillReceiveProps();\n        } else {\n          _this2.setState({\n            redirectionError: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      var _this$props2 = this.props,\n          tasks = _this$props2.tasks,\n          columns = _this$props2.columns;\n      this.setState({\n        tasks: tasks,\n        columns: columns\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          classId = _this$state2.classId,\n          columns = _this$state2.columns,\n          tasks = _this$state2.tasks;\n      var redirectionError = this.state.redirectionError;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, redirectionError && React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"classWrapper\",\n        style: {\n          height: window.innerHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"columns\"\n        }, provided.droppableProps, {\n          ref: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }), columns.sort(sorting).map(function (column, index) {\n          if (column.boardId === classId) {\n            return React.createElement(Column, {\n              key: column.id,\n              column: column,\n              columnId: column.id,\n              index: index,\n              tasks: tasks,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 143\n              },\n              __self: this\n            });\n          }\n        }), provided.placeholder, React.createElement(NewColumn, {\n          classId: classId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }));\n      }))), React.createElement(TaskOverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Classes;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var database = state.database,\n      account = state.account;\n  var columns = database.BoardColumn;\n  var tasks = database.BoardColumnCard;\n  return {\n    account: account,\n    columns: columns,\n    tasks: tasks\n  };\n};\n\nexport default connect(mapStateToProps)(Classes);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/screens/users/bro/ClassManager.js"],"names":["React","Component","Redirect","connect","DragDropContext","Droppable","Column","NewColumn","TaskOverlay","Navbar","client","sorting","Classes","state","redirectionError","api","classId","columns","tasks","onDragEnd","result","source","destination","draggableId","type","newColumn","parseInt","position","index","timestamp","Date","now","setState","allIds","byId","updateBoardColumn","id","droppableId","updateBoardColumnCard","boardColumnId","props","match","account","scope","then","params","sessionId","componentWillReceiveProps","height","window","innerHeight","provided","droppableProps","innerRef","sort","map","column","boardId","placeholder","mapStateToProps","database","BoardColumn","BoardColumnCard"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Column, NewColumn, TaskOverlay } from '../../../common/ClassComponents';\nimport { Navbar } from '../../home/component';\nimport client from '../../../socket';\nimport sorting from '../utility-functions';\n\n\nclass Classes extends Component {\n  state = {\n    // true if the id in the url doesn't match\n    redirectionError: false,\n    api: {},\n    classId: null,\n    columns: {},\n    tasks: {},\n  };\n\n  componentWillMount() {\n    const { match, account} = this.props;\n    client.scope('Mentee').then((result) => {\n      // checking if the user's sessionid is real\n      if (match.params.id === account.sessionId) {\n        this.setState({\n          api: result,\n          classId: parseInt(match.params.classId, 10),\n        });\n        this.componentWillReceiveProps();\n      } else {\n        this.setState({\n          redirectionError: true,\n        });\n      }\n    });\n  }\n\n  componentWillReceiveProps() {\n    const { tasks, columns } = this.props;\n    this.setState({\n      tasks,\n      columns,\n    });\n  }\n\n  onDragEnd = async (result) => {\n    const { source, destination, draggableId, type } = result;\n    const { api, columns } = this.state;\n    if (!destination) {\n      return;\n    }\n    // column moving around\n    if (type === 'column') {\n      // updating the state prior for efficient change\n      const newColumn = columns[parseInt(draggableId, 10)];\n      newColumn.position = destination.index;\n      newColumn.timestamp = Date.now();\n      this.setState({\n        columns: {\n          allIds: columns.allIds,\n          byId: {\n            ...columns.byId,\n            [parseInt(draggableId, 10)]: newColumn,\n          },\n        },\n      });\n      await api.updateBoardColumn([\n        { position: destination.index, timestamp: Date.now() }, { id: parseInt(draggableId, 10) }]);\n      return;\n    }\n    // const start = columns[source.droppableId];\n    // const finish = columns[destination.droppableId];\n    if (source.droppableId === destination.droppableId) {\n      await api.updateBoardColumnCard([\n        { position: destination.index, timestamp: Date.now() }, { id: parseInt(draggableId, 10) }]);\n      return;\n    }\n    await api.updateBoardColumnCard([\n      {\n        position: destination.index,\n        timestamp: Date.now(),\n        boardColumnId: parseInt(destination.droppableId, 10),\n      },\n      { id: parseInt(draggableId, 10) },\n    ]);\n    // if (start === finish) {\n    //   const newTaskIds = Array.from(start.taskIds);\n    //   newTaskIds.splice(source.index, 1);\n    //   newTaskIds.splice(destination.index, 0, draggableId);\n    //   const newColumn = {\n    //     ...start,\n    //     taskIds: newTaskIds,\n    //   };\n    //   updateClassValue('columns', { ...columns, [newColumn.id]: newColumn });\n    //   return;\n    // }\n    // // moving from one column to another\n    // const startTaskIds = Array.from(start.taskIds);\n    // const finishTaskIds = Array.from(finish.taskIds);\n    // startTaskIds.splice(source.index, 1);\n    // const newStart = {\n    //   ...start,\n    //   taskIds: startTaskIds,\n    // };\n    // finishTaskIds.splice(destination.index, 0, draggableId);\n    // const newFinish = {\n    //   ...finish,\n    //   taskIds: finishTaskIds,\n    // };\n    // updateClassValue('columns', { ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });\n  }\n\n  render() {\n    const { classId, columns, tasks } = this.state;\n    const { redirectionError } = this.state;\n    return (\n      <div>\n        {redirectionError && <Redirect to=\"/\" />}\n        <Navbar />\n        <div\n          className=\"classWrapper\"\n          style={{ height: window.innerHeight }}\n        >\n          <DragDropContext\n            onDragEnd={this.onDragEnd}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              { provided => (\n                <div\n                  className=\"columns\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {\n                    columns.sort(sorting).map((column, index) => {\n                      if (column.boardId === classId) {\n                        return (\n                          <Column\n                            key={column.id}\n                            column={column}\n                            columnId={column.id}\n                            index={index}\n                            tasks={tasks}\n                          />\n                        );\n                      }\n                    })\n                  }\n                  {provided.placeholder}\n                  <NewColumn classId={classId} />\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <TaskOverlay />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { database, account } = state;\n  const columns = database.BoardColumn;\n  const tasks = database.BoardColumnCard;\n  return { account, columns, tasks };\n};\nexport default connect(mapStateToProps)(Classes);\n"]},"metadata":{},"sourceType":"module"}