{"ast":null,"code":"import _defineProperty from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport schemaRedux from '@probro/common/src/schema';\nexport default function schemaReducer() {\n  for (var _len = arguments.length, schemes = new Array(_len), _key = 0; _key < _len; _key++) {\n    schemes[_key] = arguments[_key];\n  }\n\n  var structure = schemes.reduce(function (res, scheme) {\n    res[scheme] = {\n      byId: {},\n      allIds: []\n    };\n    return res;\n  }, {});\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : structure;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var schema = action.schema; // Only process actions that have schema\n\n    if (!schema || !state[schema]) {\n      return state;\n    }\n\n    switch (action.type) {\n      // Initialise the reducer with initial value\n      case schemaRedux.init.TYPE:\n        console.log('schema initcalled', action);\n        return _objectSpread({}, state, _defineProperty({}, schema, action.payload.reduce(function (res, item) {\n          res.byId[item.id] = item;\n          res.allIds.push(item.id);\n        }, {\n          byId: {},\n          allIds: []\n        })));\n      // Add the data according to schema\n\n      case schemaRedux.add.TYPE:\n        return _objectSpread({}, state, _defineProperty({}, schema, {\n          byId: _objectSpread({}, state[schema].byId, _defineProperty({}, action.payload.id, action.payload)),\n          allIds: state[schema].allIds.concat(action.payload.id)\n        }));\n      // Remove the data from specific schema\n\n      case schemaRedux.remove.TYPE:\n        // eslint-disable-next-line\n        var temp = Object.assign({}, state[schema].byId);\n        delete temp[action.payload.id];\n        return _objectSpread({}, state, _defineProperty({}, schema, {\n          allIds: state[schema].allIds.filter(function (id) {\n            return id !== action.payload.id;\n          }),\n          byId: temp\n        }));\n      // Update the data of specific schema\n\n      case schemaRedux.update.TYPE:\n        return _objectSpread({}, state, _defineProperty({}, schema, {\n          byId: _objectSpread({}, state[schema].byId, _defineProperty({}, action.payload.id, _objectSpread({}, state[schema].byId[action.payload.id], action.payload))),\n          allIds: state[schema].allIds\n        }));\n      // Return initial structure if no case found\n\n      default:\n        return state;\n    }\n  };\n}","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/redux/schema/reducer.js"],"names":["schemaRedux","schemaReducer","schemes","structure","reduce","res","scheme","byId","allIds","state","action","schema","type","init","TYPE","console","log","payload","item","id","push","add","concat","remove","temp","Object","assign","filter","update"],"mappings":"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","sourcesContent":["import schemaRedux from '@probro/common/src/schema';\n\nexport default function schemaReducer(...schemes) {\n  const structure = schemes.reduce((res, scheme) => {\n    res[scheme] = {\n      byId: {},\n      allIds: [],\n    };\n    return res;\n  }, {});\n\n  return (state = structure, action) => {\n\n    const { schema } = action;\n    // Only process actions that have schema\n    if (!schema || !state[schema]) {\n      return state;\n    }\n\n    switch (action.type) {\n\n      // Initialise the reducer with initial value\n      case schemaRedux.init.TYPE:\n        console.log('schema initcalled', action);\n        return {\n          ...state,\n          [schema]: action.payload.reduce((res, item) => {\n            res.byId[item.id] = item;\n            res.allIds.push(item.id);\n          }, { byId: {}, allIds: [] }),\n        };\n\n      // Add the data according to schema\n      case schemaRedux.add.TYPE:\n        return {\n          ...state,\n          [schema]: {\n            byId: { ...state[schema].byId, [action.payload.id]: action.payload },\n            allIds: state[schema].allIds.concat(action.payload.id),\n          },\n        };\n\n      // Remove the data from specific schema\n      case schemaRedux.remove.TYPE:\n        // eslint-disable-next-line\n        const temp = Object.assign({}, state[schema].byId);\n        delete temp[action.payload.id];\n        return {\n          ...state,\n          [schema]: {\n            allIds: state[schema].allIds.filter(id => id !== action.payload.id),\n            byId: temp,\n          },\n        };\n\n      // Update the data of specific schema\n      case schemaRedux.update.TYPE:\n        return {\n          ...state,\n          [schema]: {\n            byId: {\n              ...state[schema].byId,\n              [action.payload.id]: {\n                ...state[schema].byId[action.payload.id],\n                ...action.payload,\n              },\n            },\n            allIds: state[schema].allIds,\n          },\n        };\n\n      // Return initial structure if no case found\n      default:\n        return state;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}