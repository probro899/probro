{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/NewTask.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\nimport client from '../../socket';\nimport { PopoverForm } from '../../components';\nimport TaskFormStructure from '../../common/ClassComponents/structure';\n\nvar NewTask =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewTask, _Component);\n\n  function NewTask() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewTask);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewTask)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // if to open the popover to add the title to the new task.\n      popOpen: false,\n      api: {}\n    };\n\n    _this.handlePopOverForm = function () {\n      var popOpen = _this.state.popOpen;\n\n      _this.setState({\n        popOpen: !popOpen\n      });\n    };\n\n    _this.addNewTask = function () {\n      var _this$props = _this.props,\n          _class = _this$props._class,\n          updateClassValue = _this$props.updateClassValue,\n          columnId = _this$props.columnId;\n      var tasks = _class.tasks,\n          columns = _class.columns;\n      var taskId = Math.random().toString(36).substring(7);\n\n      var newTasks = _objectSpread({}, tasks, _defineProperty({}, taskId, {\n        id: taskId,\n        title: 'New Task just Assigned',\n        description: 'Sample description',\n        comments: []\n      }));\n\n      var columnTasks = columns[columnId].taskIds;\n      columnTasks.push(taskId);\n\n      var newColumns = _objectSpread({}, columns, _defineProperty({}, columnId, _objectSpread({}, columns[columnId], {\n        taskIds: columnTasks\n      })));\n\n      updateClassValue('tasks', newTasks);\n      updateClassValue('columns', newColumns);\n    };\n\n    return _this;\n  }\n\n  _createClass(NewTask, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var api;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return client.scope('Mentee');\n\n              case 2:\n                api = _context.sent;\n                this.setState({\n                  api: api\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var popOpen = this.state.popOpen;\n      return React.createElement(\"div\", {\n        className: \"column-footer\",\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: this.onClick,\n        onClick: this.handlePopOverForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, popOpen && React.createElement(PopoverForm, {\n        isOpen: popOpen,\n        onClose: this.handlePopOverForm,\n        callback: this.addNewTask,\n        structure: TaskFormStructure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), \"+ New Task\");\n    }\n  }]);\n\n  return NewTask;\n}(Component);\n\nNewTask.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired,\n  columnId: PropTypes.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownprops) {\n  return _objectSpread({}, state, ownprops);\n};\n\nexport default connect(mapStateToProps, _objectSpread({}, actions))(NewTask);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/NewTask.js"],"names":["React","Component","connect","PropTypes","actions","client","PopoverForm","TaskFormStructure","NewTask","state","popOpen","api","handlePopOverForm","setState","addNewTask","props","_class","updateClassValue","columnId","tasks","columns","taskId","Math","random","toString","substring","newTasks","id","title","description","comments","columnTasks","taskIds","push","newColumns","scope","onClick","propTypes","objectOf","any","isRequired","func","string","mapStateToProps","ownprops"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../../actions';\nimport client from '../../socket';\nimport { PopoverForm } from '../../components';\nimport TaskFormStructure from '../../common/ClassComponents/structure';\n\nclass NewTask extends Component {\n  state = {\n    // if to open the popover to add the title to the new task.\n    popOpen: false,\n    api: {},\n  };\n\n  async componentWillMount() {\n    const api = await client.scope('Mentee');\n    this.setState({\n      api,\n    });\n  }\n\n  handlePopOverForm = () => {\n    const { popOpen } = this.state;\n    this.setState({\n      popOpen: !popOpen,\n    });\n  }\n\n  addNewTask = () => {\n    const { _class, updateClassValue, columnId } = this.props;\n    const { tasks, columns } = _class;\n    const taskId = Math.random().toString(36).substring(7);\n    const newTasks = {\n      ...tasks,\n      [taskId]: { id: taskId, title: 'New Task just Assigned', description: 'Sample description', comments: [] },\n    };\n    const columnTasks = columns[columnId].taskIds;\n    columnTasks.push(taskId);\n    const newColumns = {\n      ...columns,\n      [columnId]: {\n        ...columns[columnId],\n        taskIds: columnTasks,\n      },\n    };\n    updateClassValue('tasks', newTasks);\n    updateClassValue('columns', newColumns);\n  };\n\n  render() {\n    const { popOpen } = this.state;\n    return (\n      <div className=\"column-footer\" role=\"button\" tabIndex={0} onKeyDown={this.onClick} onClick={this.handlePopOverForm}>\n        {\n          popOpen\n          && (\n          <PopoverForm\n            isOpen={popOpen}\n            onClose={this.handlePopOverForm}\n            callback={this.addNewTask}\n            structure={TaskFormStructure}\n          />\n          )\n        }\n        + New Task\n      </div>\n    );\n  }\n}\n\nNewTask.propTypes = {\n  _class: PropTypes.objectOf(PropTypes.any).isRequired,\n  updateClassValue: PropTypes.func.isRequired,\n  columnId: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state, ownprops) => ({ ...state, ...ownprops });\nexport default connect(mapStateToProps, { ...actions })(NewTask);\n"]},"metadata":{},"sourceType":"module"}