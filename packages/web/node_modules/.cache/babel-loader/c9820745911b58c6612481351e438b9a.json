{"ast":null,"code":"import _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/Form.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from '@blueprintjs/core';\nimport Input from './Input';\nimport Button from './Button';\n\nvar Element = function Element(props) {\n  var data = props.data;\n\n  if (!data.fieldType) {\n    return null;\n  }\n\n  switch (data.fieldType) {\n    case 'input':\n      return React.createElement(Input, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }));\n\n    case 'button':\n      return React.createElement(Button, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }));\n\n    default:\n      return null;\n  }\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      error: false,\n      loading: false,\n      success: null\n    };\n\n    _this.onChange = function (key, value) {\n      return _this.setState(_defineProperty({}, key, value));\n    };\n\n    _this.onSubmit = function () {\n      console.log('it is what it is');\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.props.data;\n      return React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, data.map(function (obj, idx) {\n        return React.createElement(Element, {\n          key: idx,\n          data: obj,\n          onChange: _this2.onChange,\n          onClick: _this2.onSubmit,\n          value: _this2.state[obj.id],\n          state: _this2.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Form;\n}(React.Component);\n\nForm.propTypes = {\n  data: PropTypes.array.isRequired\n};\nexport default Form;","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/Form.js"],"names":["React","PropTypes","FormGroup","Input","Button","Element","props","data","fieldType","Form","state","error","loading","success","onChange","key","value","setState","onSubmit","console","log","map","obj","idx","id","Component","propTypes","array","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,MACjBC,IADiB,GACRD,KADQ,CACjBC,IADiB;;AAEzB,MAAI,CAACA,IAAI,CAACC,SAAV,EAAqB;AACnB,WAAO,IAAP;AACD;;AACD,UAAQD,IAAI,CAACC,SAAb;AACE,SAAK,OAAL;AACE,aAAQ,oBAAC,KAAD,oBAAWF,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AACF,SAAK,QAAL;AACE,aAAQ,oBAAC,MAAD,oBAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AACF;AACE,aAAO,IAAP;AANJ;AAQD,CAbD;;IAeMG,I;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,KADD;AAENC,MAAAA,OAAO,EAAE,KAFH;AAGNC,MAAAA,OAAO,EAAE;AAHH,K;;UAMRC,Q,GAAW,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACzB,aAAO,MAAKC,QAAL,qBAAiBF,GAAjB,EAAuBC,KAAvB,EAAP;AACD,K;;UAEDE,Q,GAAW,YAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,K;;;;;;;6BAEQ;AAAA;;AAAA,UACCb,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAEP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEIA,IAAI,CAACc,GAAL,CAAS,UAACC,GAAD,EAAMC,GAAN;AAAA,eACP,oBAAC,OAAD;AACE,UAAA,GAAG,EAAEA,GADP;AAEE,UAAA,IAAI,EAAED,GAFR;AAGE,UAAA,QAAQ,EAAE,MAAI,CAACR,QAHjB;AAIE,UAAA,OAAO,EAAE,MAAI,CAACI,QAJhB;AAKE,UAAA,KAAK,EAAE,MAAI,CAACR,KAAL,CAAWY,GAAG,CAACE,EAAf,CALT;AAME,UAAA,KAAK,EAAE,MAAI,CAACd,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADO;AAAA,OAAT,CAFJ,CADF;AAgBD;;;;EAjCgBV,KAAK,CAACyB,S;;AAoCzBhB,IAAI,CAACiB,SAAL,GAAiB;AACfnB,EAAAA,IAAI,EAAEN,SAAS,CAAC0B,KAAV,CAAgBC;AADP,CAAjB;AAIA,eAAenB,IAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from '@blueprintjs/core';\nimport Input from './Input';\nimport Button from './Button';\n\nconst Element = (props) => {\n  const { data } = props;\n  if (!data.fieldType) {\n    return null;\n  }\n  switch (data.fieldType) {\n    case 'input':\n      return (<Input {...props} />);\n    case 'button':\n      return (<Button {...props} />);\n    default:\n      return null;\n  }\n};\n\nclass Form extends React.Component {\n  state = {\n    error: false,\n    loading: false,\n    success: null,\n  };\n\n  onChange = (key, value) => {\n    return this.setState({ [key]: value });\n  }\n\n  onSubmit = () => {\n    console.log('it is what it is');\n  }\n\n  render() {\n    const { data } = this.props;\n    return (\n      <FormGroup>\n        {\n          data.map((obj, idx) => (\n            <Element\n              key={idx}\n              data={obj}\n              onChange={this.onChange}\n              onClick={this.onSubmit}\n              value={this.state[obj.id]}\n              state={this.state}\n            />\n          ))\n        }\n      </FormGroup>\n    );\n  }\n}\n\nForm.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}