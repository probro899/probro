{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/NewTask.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport client from '../../socket';\nimport { PopoverForm } from '../../components';\nimport TaskFormStructure from './structure';\n\nvar NewTask =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewTask, _Component);\n\n  function NewTask() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewTask);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewTask)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // if to open the popover to add the title to the new task.\n      popOpen: false,\n      api: {}\n    };\n\n    _this.handlePopOverForm = function () {\n      var popOpen = _this.state.popOpen;\n\n      _this.setState({\n        popOpen: !popOpen\n      });\n    };\n\n    _this.addNewTask =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var _this$props, columnId, account, database, api, pos;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = _this.props, columnId = _this$props.columnId, account = _this$props.account, database = _this$props.database;\n                api = _this.state.api;\n                pos = Object.keys(database.BoardColumnCard.byId).reduce(function (count, obj) {\n                  if (database.BoardColumnCard.byId[obj].boardColumnId === columnId) {\n                    // eslint-disable-next-line no-param-reassign\n                    count += 1;\n                  }\n\n                  return count;\n                }, 0);\n                _context.next = 5;\n                return api.addBoardColumnCard({\n                  userId: account.user.id,\n                  addBoardColumnCard: columnId,\n                  timeStamp: Date.now(),\n                  name: data.name,\n                  position: pos + 1\n                });\n\n              case 5:\n                _this.handlePopOverForm();\n\n                return _context.abrupt(\"return\", {\n                  response: 200\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(NewTask, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var api;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return client.scope('Mentee');\n\n              case 2:\n                api = _context2.sent;\n                this.setState({\n                  api: api\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var popOpen = this.state.popOpen;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, popOpen && React.createElement(PopoverForm, {\n        isOpen: popOpen,\n        onClose: this.handlePopOverForm,\n        callback: this.addNewTask,\n        structure: TaskFormStructure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"column-footer\",\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: this.onClick,\n        onClick: this.handlePopOverForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"+ New Task\"));\n    }\n  }]);\n\n  return NewTask;\n}(Component);\n\nNewTask.propTypes = {\n  columnId: PropTypes.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps)(NewTask);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/NewTask.js"],"names":["React","Component","connect","PropTypes","client","PopoverForm","TaskFormStructure","NewTask","state","popOpen","api","handlePopOverForm","setState","addNewTask","data","props","columnId","account","database","pos","Object","keys","BoardColumnCard","byId","reduce","count","obj","boardColumnId","addBoardColumnCard","userId","user","id","timeStamp","Date","now","name","position","response","scope","onClick","propTypes","string","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport client from '../../socket';\nimport { PopoverForm } from '../../components';\nimport TaskFormStructure from './structure';\n\nclass NewTask extends Component {\n  state = {\n    // if to open the popover to add the title to the new task.\n    popOpen: false,\n    api: {},\n  };\n\n  async componentWillMount() {\n    const api = await client.scope('Mentee');\n    this.setState({\n      api,\n    });\n  }\n\n  handlePopOverForm = () => {\n    const { popOpen } = this.state;\n    this.setState({\n      popOpen: !popOpen,\n    });\n  }\n\n  addNewTask = async (data) => {\n    const { columnId, account, database } = this.props;\n    const { api } = this.state;\n    const pos = Object.keys(database.BoardColumnCard.byId).reduce((count, obj) => {\n      if (database.BoardColumnCard.byId[obj].boardColumnId === columnId) {\n        // eslint-disable-next-line no-param-reassign\n        count += 1;\n      }\n      return count;\n    }, 0);\n    await api.addBoardColumnCard({\n      userId: account.user.id,\n      addBoardColumnCard: columnId,\n      timeStamp: Date.now(),\n      name: data.name,\n      position: pos + 1,\n    });\n    this.handlePopOverForm();\n    return { response: 200 };\n  };\n\n  render() {\n    const { popOpen } = this.state;\n    return (\n      <div>\n        {\n          popOpen\n          && (\n          <PopoverForm\n            isOpen={popOpen}\n            onClose={this.handlePopOverForm}\n            callback={this.addNewTask}\n            structure={TaskFormStructure}\n          />\n          )\n        }\n        <div className=\"column-footer\" role=\"button\" tabIndex={0} onKeyDown={this.onClick} onClick={this.handlePopOverForm}>\n          + New Task\n        </div>\n      </div>\n    );\n  }\n}\n\nNewTask.propTypes = {\n  columnId: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => state;\nexport default connect(mapStateToProps)(NewTask);\n"]},"metadata":{},"sourceType":"module"}