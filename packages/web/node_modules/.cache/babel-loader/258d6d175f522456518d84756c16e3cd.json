{"ast":null,"code":"import _regeneratorRuntime from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(mediaType) {\n    var stream;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            stream = null;\n            _context.t0 = mediaType;\n            _context.next = _context.t0 === 'audio' ? 4 : _context.t0 === 'video' ? 6 : _context.t0 === 'screenshare' ? 10 : 14;\n            break;\n\n          case 4:\n            try {\n              navigator.getWebcam = navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n              if (navigator.mediaDevices.getUserMedia) {\n                stream = navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: true\n                });\n              } else {\n                stream = navigator.getWebcam({\n                  audio: true,\n                  video: true\n                });\n              }\n            } catch (e) {\n              console.log('getUSermeida error', e);\n            }\n\n            return _context.abrupt(\"return\", stream);\n\n          case 6:\n            _context.next = 8;\n            return navigator.mediaDevices.getUserMedia({\n              video: true,\n              audio: true\n            });\n\n          case 8:\n            stream = _context.sent;\n            return _context.abrupt(\"return\", stream);\n\n          case 10:\n            _context.next = 12;\n            return navigator.mediaDevices.getDisplayMedia({\n              video: true\n            });\n\n          case 12:\n            stream = _context.sent;\n            return _context.abrupt(\"return\", stream);\n\n          case 14:\n            return _context.abrupt(\"return\", stream);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/webrtc/helper-functions/mediaSelector.js"],"names":["mediaType","stream","navigator","getWebcam","getUserMedia","webKitGetUserMedia","moxGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","audio","video","e","console","log","getDisplayMedia"],"mappings":";;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOA,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,MADS,GACA,IADA;AAAA,0BAGLD,SAHK;AAAA,4CAIN,OAJM,uBAgBN,OAhBM,uBAmBN,aAnBM;AAAA;;AAAA;AAKT,gBAAI;AACFE,cAAAA,SAAS,CAACC,SAAV,GAAuBD,SAAS,CAACE,YAAV,IAA0BF,SAAS,CAACG,kBAApC,IAA0DH,SAAS,CAACI,eAApE,IAAuFJ,SAAS,CAACK,eAAjG,IAAoHL,SAAS,CAACM,cAArJ;;AACA,kBAAIN,SAAS,CAACO,YAAV,CAAuBL,YAA3B,EAAyC;AACvCH,gBAAAA,MAAM,GAAIC,SAAS,CAACO,YAAV,CAAuBL,YAAvB,CAAoC;AAAEM,kBAAAA,KAAK,EAAE,IAAT;AAAeC,kBAAAA,KAAK,EAAE;AAAtB,iBAApC,CAAV;AACD,eAFD,MAEO;AACLV,gBAAAA,MAAM,GAAIC,SAAS,CAACC,SAAV,CAAoB;AAAEO,kBAAAA,KAAK,EAAE,IAAT;AAAeC,kBAAAA,KAAK,EAAE;AAAtB,iBAApB,CAAV;AACD;AACF,aAPD,CAOE,OAAOC,CAAP,EAAU;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,CAAlC;AACD;;AAdQ,6CAeFX,MAfE;;AAAA;AAAA;AAAA,mBAiBMC,SAAS,CAACO,YAAV,CAAuBL,YAAvB,CAAoC;AAAEO,cAAAA,KAAK,EAAE,IAAT;AAAeD,cAAAA,KAAK,EAAE;AAAtB,aAApC,CAjBN;;AAAA;AAiBTT,YAAAA,MAjBS;AAAA,6CAkBFA,MAlBE;;AAAA;AAAA;AAAA,mBAoBMC,SAAS,CAACO,YAAV,CAAuBM,eAAvB,CAAuC;AAAEJ,cAAAA,KAAK,EAAE;AAAT,aAAvC,CApBN;;AAAA;AAoBTV,YAAAA,MApBS;AAAA,6CAqBFA,MArBE;;AAAA;AAAA,6CAuBFA,MAvBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nexport default async (mediaType) => {\n  let stream = null;\n\n  switch (mediaType) {\n    case 'audio':\n      try {\n        navigator.getWebcam = (navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n        if (navigator.mediaDevices.getUserMedia) {\n          stream =  navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n        } else {\n          stream =  navigator.getWebcam({ audio: true, video: true });\n        }\n      } catch (e) {\n        console.log('getUSermeida error', e);\n      }\n      return stream;\n    case 'video':\n      stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n      return stream;\n    case 'screenshare':\n      stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\n      return stream;\n    default:\n      return stream;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}