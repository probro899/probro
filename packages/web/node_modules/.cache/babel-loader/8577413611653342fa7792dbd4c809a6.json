{"ast":null,"code":"import _regeneratorRuntime from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { updateFormValue } from '../index';\nimport { ENDPOINT } from '../../config';\nimport connect from '../../socket/connect';\nimport { updateMainValue } from '../mainHandler';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n    var _getState, form, _form$loginForm, email, password, res, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(updateFormValue('loginForm', {\n              loading: true,\n              error: null,\n              success: null\n            }));\n            _getState = getState(), form = _getState.form;\n            _form$loginForm = form.loginForm, email = _form$loginForm.email, password = _form$loginForm.password;\n\n            if (!(email === '' || password === '')) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", dispatch(updateFormValue('loginForm', {\n              loading: false,\n              error: 'Enter your login credentials.'\n            })));\n\n          case 5:\n            _context.prev = 5;\n            _context.next = 8;\n            return axios.post(\"\".concat(ENDPOINT, \"/auth/login\"), {\n              email: email,\n              password: password\n            });\n\n          case 8:\n            res = _context.sent;\n            data = res.data;\n\n            if (res.status === 200 && data.token) {\n              connect(data);\n              dispatch(updateFormValue('loginForm', {\n                loading: false,\n                error: null,\n                success: true,\n                email: '',\n                password: ''\n              }));\n            }\n\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](5);\n            dispatch(updateFormValue('loginForm', {\n              loading: false,\n              error: 'Invalid Username or Password'\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 13]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/actions/helper-functions/loginFormHandler.js"],"names":["axios","updateFormValue","ENDPOINT","connect","updateMainValue","dispatch","getState","loading","error","success","form","loginForm","email","password","post","res","data","status","token"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,QAAQ,CAACJ,eAAe,CAAC,WAAD,EAAc;AAAEM,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,KAAK,EAAE,IAAxB;AAA8BC,cAAAA,OAAO,EAAE;AAAvC,aAAd,CAAhB,CAAR;AADa,wBAEIH,QAAQ,EAFZ,EAELI,IAFK,aAELA,IAFK;AAAA,8BAGeA,IAAI,CAACC,SAHpB,EAGLC,KAHK,mBAGLA,KAHK,EAGEC,QAHF,mBAGEA,QAHF;;AAAA,kBAITD,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAJpB;AAAA;AAAA;AAAA;;AAAA,6CAKJR,QAAQ,CAACJ,eAAe,CAAC,WAAD,EAAc;AAAEM,cAAAA,OAAO,EAAE,KAAX;AAAkBC,cAAAA,KAAK,EAAE;AAAzB,aAAd,CAAhB,CALJ;;AAAA;AAAA;AAAA;AAAA,mBAQOR,KAAK,CAACc,IAAN,WAAcZ,QAAd,kBAAqC;AAAEU,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,QAAQ,EAARA;AAAT,aAArC,CARP;;AAAA;AAQLE,YAAAA,GARK;AASHC,YAAAA,IATG,GASMD,GATN,CASHC,IATG;;AAUX,gBAAID,GAAG,CAACE,MAAJ,KAAe,GAAf,IAAsBD,IAAI,CAACE,KAA/B,EAAsC;AACpCf,cAAAA,OAAO,CAACa,IAAD,CAAP;AACAX,cAAAA,QAAQ,CAACJ,eAAe,CAAC,WAAD,EAAc;AACpCM,gBAAAA,OAAO,EAAE,KAD2B;AAEpCC,gBAAAA,KAAK,EAAE,IAF6B;AAGpCC,gBAAAA,OAAO,EAAE,IAH2B;AAIpCG,gBAAAA,KAAK,EAAE,EAJ6B;AAKpCC,gBAAAA,QAAQ,EAAE;AAL0B,eAAd,CAAhB,CAAR;AAOD;;AAnBU;AAAA;;AAAA;AAAA;AAAA;AAqBXR,YAAAA,QAAQ,CAACJ,eAAe,CAAC,WAAD,EAAc;AAAEM,cAAAA,OAAO,EAAE,KAAX;AAAkBC,cAAAA,KAAK,EAAE;AAAzB,aAAd,CAAhB,CAAR;;AArBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport { updateFormValue } from '../index';\nimport { ENDPOINT } from '../../config';\nimport connect from '../../socket/connect';\nimport { updateMainValue } from '../mainHandler';\n\nexport default async (dispatch, getState) => {\n  dispatch(updateFormValue('loginForm', { loading: true, error: null, success: null }));\n  const { form } = getState();\n  const { email, password } = form.loginForm;\n  if (email === '' || password === '') {\n    return dispatch(updateFormValue('loginForm', { loading: false, error: 'Enter your login credentials.' }));\n  }\n  try {\n    const res = await axios.post(`${ENDPOINT}/auth/login`, { email, password });\n    const { data } = res;\n    if (res.status === 200 && data.token) {\n      connect(data);\n      dispatch(updateFormValue('loginForm', {\n        loading: false,\n        error: null,\n        success: true,\n        email: '',\n        password: '',\n      }));\n    }\n  } catch {\n    dispatch(updateFormValue('loginForm', { loading: false, error: 'Invalid Username or Password' }));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}