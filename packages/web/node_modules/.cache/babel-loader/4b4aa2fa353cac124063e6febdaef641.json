{"ast":null,"code":"import _toArray from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _METHOD_MAPS;\n\nvar TYPE_RPC_REQUEST = 1;\nvar TYPE_RPC_RESPONSE = 2;\nvar TYPE_EVENT = 3;\nvar TYPE_ACTION = 4;\nvar TYPE_SCOPE_REQUEST = 5;\nvar TYPE_SCOPE_RESPONSE = 6;\nvar TYPE_CALL = 7;\nvar METHOD_MAPS = (_METHOD_MAPS = {}, _defineProperty(_METHOD_MAPS, TYPE_RPC_REQUEST, 'onRpcRequest'), _defineProperty(_METHOD_MAPS, TYPE_RPC_RESPONSE, 'onRpcResponse'), _defineProperty(_METHOD_MAPS, TYPE_EVENT, 'onEvent'), _defineProperty(_METHOD_MAPS, TYPE_ACTION, 'onAction'), _defineProperty(_METHOD_MAPS, TYPE_SCOPE_REQUEST, 'onScopeRequest'), _defineProperty(_METHOD_MAPS, TYPE_SCOPE_RESPONSE, 'onScopeResponse'), _defineProperty(_METHOD_MAPS, TYPE_CALL, 'onCall'), _METHOD_MAPS);\nexport function PKT_RPC_REQUEST(tracker, scope, api, args) {\n  return JSON.stringify([TYPE_RPC_REQUEST, tracker, scope, api, args]);\n}\nexport function PKT_RPC_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_RPC_RESPONSE, tracker, success, result]);\n}\nexport function PKT_EVENT(name, data) {\n  return JSON.stringify([TYPE_EVENT, name, data]);\n}\nexport function PKT_ACTION(action) {\n  return JSON.stringify([TYPE_ACTION, action]);\n}\nexport function PKT_SCOPE_REQUEST(tracker, name, version) {\n  return JSON.stringify([TYPE_SCOPE_REQUEST, tracker, name, version]);\n}\nexport function PKT_SCOPE_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_SCOPE_RESPONSE, tracker, success, result]);\n}\nexport function PKT_CALL(scope, api, args) {\n  return JSON.stringify([TYPE_CALL, scope, api, args]);\n}\nexport function createParser() {\n  var parser = {\n    parse: function parse(message) {\n      // console.log('message', message);\n      try {\n        var data = JSON.parse(message); // console.log('data', data);\n\n        if (!Array.isArray(data)) {\n          throw new Error('Invalid message format');\n        }\n\n        var _data = _toArray(data),\n            type = _data[0],\n            other = _data.slice(1);\n\n        var method = METHOD_MAPS[type];\n\n        if (!method) {\n          throw new Error(\"Unknown message type - \".concat(type));\n        }\n\n        if (!parser[method]) {\n          throw new Error(\"No parser defined for - \".concat(method));\n        }\n\n        try {\n          parser[method].apply(null, other);\n        } catch (err) {\n          throw new Error(\"Error executing parser - \".concat(method, \" - \").concat(err.message));\n        }\n      } catch (err) {\n        if (parser.onError) {\n          parser.onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Error parsing message', err);\n        }\n      }\n    }\n  };\n  return parser;\n}","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/common/proSocket-common/index.js"],"names":["TYPE_RPC_REQUEST","TYPE_RPC_RESPONSE","TYPE_EVENT","TYPE_ACTION","TYPE_SCOPE_REQUEST","TYPE_SCOPE_RESPONSE","TYPE_CALL","METHOD_MAPS","PKT_RPC_REQUEST","tracker","scope","api","args","JSON","stringify","PKT_RPC_RESPONSE","success","result","PKT_EVENT","name","data","PKT_ACTION","action","PKT_SCOPE_REQUEST","version","PKT_SCOPE_RESPONSE","PKT_CALL","createParser","parser","parse","message","Array","isArray","Error","type","other","method","apply","err","onError","console","error"],"mappings":"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","sourcesContent":["const TYPE_RPC_REQUEST = 1;\nconst TYPE_RPC_RESPONSE = 2;\nconst TYPE_EVENT = 3;\nconst TYPE_ACTION = 4;\nconst TYPE_SCOPE_REQUEST = 5;\nconst TYPE_SCOPE_RESPONSE = 6;\nconst TYPE_CALL = 7;\n\nconst METHOD_MAPS = {\n  [TYPE_RPC_REQUEST]: 'onRpcRequest',\n  [TYPE_RPC_RESPONSE]: 'onRpcResponse',\n  [TYPE_EVENT]: 'onEvent',\n  [TYPE_ACTION]: 'onAction',\n  [TYPE_SCOPE_REQUEST]: 'onScopeRequest',\n  [TYPE_SCOPE_RESPONSE]: 'onScopeResponse',\n  [TYPE_CALL]: 'onCall',\n};\n\nexport function PKT_RPC_REQUEST(tracker, scope, api, args) {\n  return JSON.stringify([TYPE_RPC_REQUEST, tracker, scope, api, args]);\n}\n\nexport function PKT_RPC_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_RPC_RESPONSE, tracker, success, result]);\n}\n\nexport function PKT_EVENT(name, data) {\n  return JSON.stringify([TYPE_EVENT, name, data]);\n}\n\nexport function PKT_ACTION(action) {\n  return JSON.stringify([TYPE_ACTION, action]);\n}\n\nexport function PKT_SCOPE_REQUEST(tracker, name, version) {\n  return JSON.stringify([TYPE_SCOPE_REQUEST, tracker, name, version]);\n}\n\nexport function PKT_SCOPE_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_SCOPE_RESPONSE, tracker, success, result]);\n}\n\nexport function PKT_CALL(scope, api, args) {\n  return JSON.stringify([TYPE_CALL, scope, api, args]);\n}\n\nexport function createParser() {\n  const parser = {\n    parse: (message) => {\n      // console.log('message', message);\n      try {\n        const data = JSON.parse(message);\n        // console.log('data', data);\n        if (!Array.isArray(data)) {\n          throw new Error('Invalid message format');\n        }\n\n        const [type, ...other] = data;\n        const method = METHOD_MAPS[type];\n        if (!method) {\n          throw new Error(`Unknown message type - ${type}`);\n        }\n\n        if (!parser[method]) {\n          throw new Error(`No parser defined for - ${method}`);\n        }\n\n        try {\n          parser[method].apply(null, other);\n        } catch (err) {\n          throw new Error(`Error executing parser - ${method} - ${err.message}`);\n        }\n      } catch (err) {\n        if (parser.onError) {\n          parser.onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Error parsing message', err);\n        }\n      }\n    },\n  };\n\n  return parser;\n}\n"]},"metadata":{},"sourceType":"module"}