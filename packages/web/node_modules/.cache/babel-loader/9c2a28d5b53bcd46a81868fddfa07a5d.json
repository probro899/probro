{"ast":null,"code":"import _regeneratorRuntime from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { onIceConnectionStateChange } from '../common';\nimport client from '../../../../../../socket';\nimport onIceCandidate from './onIceCandidate';\n\nfunction gotRemoteStream(e) {\n  var videoElement = document.getElementById('video1');\n\n  if (videoElement.srcObject !== e.streams[0]) {\n    videoElement.srcObject = e.streams[0];\n  }\n}\n\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(apis, callType) {\n    var server, offerOptions, pc, stream, offer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            server = {\n              \"iceServers\": []\n            };\n            ;\n            offerOptions = {\n              offerToRecieveAudio: 1,\n              offerToRecieveVideo: 1\n            }; // creating new RTCPeerConnetion\n            // TODO server configuration for TURN or STUN\n\n            pc = new RTCPeerConnection(server); // adding some listener to track connetion state\n\n            pc.addEventListener('icecandidate', function (e) {\n              return onIceCandidate(e, pc, apis);\n            });\n            pc.addEventListener('iceconnectionstatechange', function (e) {\n              return onIceConnectionStateChange(e, pc);\n            }); // geting local audio and video\n\n            _context.next = 8;\n            return navigator.mediaDevices.getUserMedia({\n              video: true,\n              audio: true\n            });\n\n          case 8:\n            stream = _context.sent;\n            // adding video and audio  track to pc\n            stream.getTracks().forEach(function (track) {\n              return pc.addTrack(track, stream);\n            });\n            pc.addEventListener('track', gotRemoteStream); // creating offer for remote user\n\n            _context.prev = 11;\n            _context.next = 14;\n            return pc.createOffer(offerOptions);\n\n          case 14:\n            offer = _context.sent;\n            _context.next = 17;\n            return pc.setLocalDescription(offer);\n\n          case 17:\n            _context.next = 19;\n            return apis.createOffer([offer, [{\n              userId: 3\n            }]]);\n\n          case 19:\n            client.on('answer', function (data) {\n              console.log('On Aswer handler called', data);\n              pc.setRemoteDescription(data);\n            });\n            client.on('icecandidate', function (data) {\n              console.log('icecandidate handler called', data);\n              pc.addIceCandidate(new RTCIceCandidate(JSON.parse(data)));\n            });\n            _context.next = 26;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](11);\n            console.error('CreateOffer Error', _context.t0);\n\n          case 26:\n            return _context.abrupt(\"return\", pc);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 23]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/screens/users/components/communication/helper-functions/local/callHandler.js"],"names":["onIceConnectionStateChange","client","onIceCandidate","gotRemoteStream","e","videoElement","document","getElementById","srcObject","streams","apis","callType","server","offerOptions","offerToRecieveAudio","offerToRecieveVideo","pc","RTCPeerConnection","addEventListener","navigator","mediaDevices","getUserMedia","video","audio","stream","getTracks","forEach","track","addTrack","createOffer","offer","setLocalDescription","userId","on","data","console","log","setRemoteDescription","addIceCandidate","RTCIceCandidate","JSON","parse","error"],"mappings":"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","sourcesContent":["import { onIceConnectionStateChange } from '../common';\nimport client from '../../../../../../socket';\nimport onIceCandidate from './onIceCandidate';\n\n\nfunction gotRemoteStream(e) {\n  const videoElement = document.getElementById('video1');\n  if (videoElement.srcObject !== e.streams[0]) {\n    videoElement.srcObject = e.streams[0];\n  }\n}\n\nexport default async (apis, callType) => {\n  const server = {\"iceServers\":[]};;\n\n  const offerOptions = {\n    offerToRecieveAudio: 1,\n    offerToRecieveVideo: 1,\n  };\n\n  // creating new RTCPeerConnetion\n  // TODO server configuration for TURN or STUN\n  const pc = new RTCPeerConnection(server);\n\n  // adding some listener to track connetion state\n  pc.addEventListener('icecandidate', e => onIceCandidate(e, pc, apis));\n  pc.addEventListener('iceconnectionstatechange', e => onIceConnectionStateChange(e, pc));\n  // geting local audio and video\n  const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n\n  // adding video and audio  track to pc\n  stream.getTracks().forEach(track => pc.addTrack(track, stream));\n  pc.addEventListener('track', gotRemoteStream);\n  // creating offer for remote user\n  try {\n    const offer = await pc.createOffer(offerOptions);\n    await pc.setLocalDescription(offer);\n    await apis.createOffer([offer, [{ userId: 3 }]]);\n    client.on('answer', (data) => {\n      console.log('On Aswer handler called', data);\n      pc.setRemoteDescription(data);\n    });\n\n    client.on('icecandidate', (data) => {\n      console.log('icecandidate handler called', data);\n      pc.addIceCandidate(new RTCIceCandidate(JSON.parse(data)));\n    });\n  } catch (e) {\n    console.error('CreateOffer Error', e);\n  }\n  return pc;\n};\n"]},"metadata":{},"sourceType":"module"}