{"ast":null,"code":"import _regeneratorRuntime from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(mediaType) {\n    var stream;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            stream = null;\n            _context.prev = 1;\n            navigator.getWebcam = navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n            _context.t0 = mediaType;\n            _context.next = _context.t0 === 'audio' ? 6 : _context.t0 === 'video' ? 8 : _context.t0 === 'screenshare' ? 10 : 14;\n            break;\n\n          case 6:\n            if (navigator.mediaDevices.getUserMedia) {\n              stream = navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: false\n              });\n            } else {\n              stream = navigator.getWebcam({\n                audio: true,\n                video: false\n              });\n            }\n\n            return _context.abrupt(\"return\", stream);\n\n          case 8:\n            if (navigator.mediaDevices.getUserMedia) {\n              stream = navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: true\n              });\n            } else {\n              stream = navigator.getWebcam({\n                audio: true,\n                video: true\n              });\n            }\n\n            return _context.abrupt(\"return\", stream);\n\n          case 10:\n            _context.next = 12;\n            return navigator.mediaDevices.getDisplayMedia({\n              video: true\n            });\n\n          case 12:\n            stream = _context.sent;\n            return _context.abrupt(\"return\", stream);\n\n          case 14:\n            return _context.abrupt(\"return\", stream);\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t1 = _context[\"catch\"](1);\n            console.error('Media Selector error', _context.t1);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 17]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/webrtc/helper-functions/mediaSelector.js"],"names":["mediaType","stream","navigator","getWebcam","getUserMedia","webKitGetUserMedia","moxGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","audio","video","getDisplayMedia","console","error"],"mappings":";;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOA,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,MADS,GACA,IADA;AAAA;AAGXC,YAAAA,SAAS,CAACC,SAAV,GAAuBD,SAAS,CAACE,YAAV,IAA0BF,SAAS,CAACG,kBAApC,IAA0DH,SAAS,CAACI,eAApE,IAAuFJ,SAAS,CAACK,eAAjG,IAAoHL,SAAS,CAACM,cAArJ;AAHW,0BAIHR,SAJG;AAAA,4CAKJ,OALI,uBAYJ,OAZI,uBAmBJ,aAnBI;AAAA;;AAAA;AAMP,gBAAIE,SAAS,CAACO,YAAV,CAAuBL,YAA3B,EAAyC;AACvCH,cAAAA,MAAM,GAAGC,SAAS,CAACO,YAAV,CAAuBL,YAAvB,CAAoC;AAAEM,gBAAAA,KAAK,EAAE,IAAT;AAAeC,gBAAAA,KAAK,EAAE;AAAtB,eAApC,CAAT;AACD,aAFD,MAEO;AACLV,cAAAA,MAAM,GAAGC,SAAS,CAACC,SAAV,CAAoB;AAAEO,gBAAAA,KAAK,EAAE,IAAT;AAAeC,gBAAAA,KAAK,EAAE;AAAtB,eAApB,CAAT;AACD;;AAVM,6CAWAV,MAXA;;AAAA;AAaP,gBAAIC,SAAS,CAACO,YAAV,CAAuBL,YAA3B,EAAyC;AACvCH,cAAAA,MAAM,GAAGC,SAAS,CAACO,YAAV,CAAuBL,YAAvB,CAAoC;AAAEM,gBAAAA,KAAK,EAAE,IAAT;AAAeC,gBAAAA,KAAK,EAAE;AAAtB,eAApC,CAAT;AACD,aAFD,MAEO;AACLV,cAAAA,MAAM,GAAGC,SAAS,CAACC,SAAV,CAAoB;AAAEO,gBAAAA,KAAK,EAAE,IAAT;AAAeC,gBAAAA,KAAK,EAAE;AAAtB,eAApB,CAAT;AACD;;AAjBM,6CAkBAV,MAlBA;;AAAA;AAAA;AAAA,mBAoBQC,SAAS,CAACO,YAAV,CAAuBG,eAAvB,CAAuC;AAAED,cAAAA,KAAK,EAAE;AAAT,aAAvC,CApBR;;AAAA;AAoBPV,YAAAA,MApBO;AAAA,6CAqBAA,MArBA;;AAAA;AAAA,6CAuBAA,MAvBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BXY,YAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd;;AA1BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nexport default async (mediaType) => {\n  let stream = null;\n  try {\n    navigator.getWebcam = (navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n    switch (mediaType) {\n      case 'audio':\n        if (navigator.mediaDevices.getUserMedia) {\n          stream = navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n        } else {\n          stream = navigator.getWebcam({ audio: true, video: false });\n        }\n        return stream;\n      case 'video':\n        if (navigator.mediaDevices.getUserMedia) {\n          stream = navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n        } else {\n          stream = navigator.getWebcam({ audio: true, video: true });\n        }\n        return stream;\n      case 'screenshare':\n        stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\n        return stream;\n      default:\n        return stream;\n    }\n  } catch (e) {\n    console.error('Media Selector error', e);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}