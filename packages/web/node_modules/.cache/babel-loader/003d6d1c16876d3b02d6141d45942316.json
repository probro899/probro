{"ast":null,"code":"import _toArray from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _METHOD_MAPS;\n\nvar TYPE_RPC_REQUEST = 1;\nvar TYPE_RPC_RESPONSE = 2;\nvar TYPE_EVENT = 3;\nvar TYPE_ACTION = 4;\nvar TYPE_SCOPE_REQUEST = 5;\nvar TYPE_SCOPE_RESPONSE = 6;\nvar TYPE_CALL = 7;\nvar METHOD_MAPS = (_METHOD_MAPS = {}, _defineProperty(_METHOD_MAPS, TYPE_RPC_REQUEST, 'onRpcRequest'), _defineProperty(_METHOD_MAPS, TYPE_RPC_RESPONSE, 'onRpcResponse'), _defineProperty(_METHOD_MAPS, TYPE_EVENT, 'onEvent'), _defineProperty(_METHOD_MAPS, TYPE_ACTION, 'onAction'), _defineProperty(_METHOD_MAPS, TYPE_SCOPE_REQUEST, 'onScopeRequest'), _defineProperty(_METHOD_MAPS, TYPE_SCOPE_RESPONSE, 'onScopeResponse'), _defineProperty(_METHOD_MAPS, TYPE_CALL, 'onCall'), _METHOD_MAPS);\nexport function PKT_RPC_REQUEST(tracker, scope, api, args) {\n  console.log('args in common', args);\n  return JSON.stringify([TYPE_RPC_REQUEST, tracker, scope, api, args]);\n}\nexport function PKT_RPC_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_RPC_RESPONSE, tracker, success, result]);\n}\nexport function PKT_EVENT(name, data) {\n  return JSON.stringify([TYPE_EVENT, name, data]);\n}\nexport function PKT_ACTION(action) {\n  return JSON.stringify([TYPE_ACTION, action]);\n}\nexport function PKT_SCOPE_REQUEST(tracker, name, version) {\n  return JSON.stringify([TYPE_SCOPE_REQUEST, tracker, name, version]);\n}\nexport function PKT_SCOPE_RESPONSE(tracker, success, result) {\n  return JSON.stringify([TYPE_SCOPE_RESPONSE, tracker, success, result]);\n}\nexport function PKT_CALL(scope, api, args) {\n  return JSON.stringify([TYPE_CALL, scope, api, args]);\n}\nexport function createParser() {\n  var parser = {\n    parse: function parse(message) {\n      // console.log('message', message);\n      try {\n        var data = JSON.parse(message); // console.log('data', data);\n\n        if (!Array.isArray(data)) {\n          throw new Error('Invalid message format');\n        }\n\n        var _data = _toArray(data),\n            type = _data[0],\n            other = _data.slice(1);\n\n        var method = METHOD_MAPS[type];\n\n        if (!method) {\n          throw new Error(\"Unknown message type - \".concat(type));\n        }\n\n        if (!parser[method]) {\n          throw new Error(\"No parser defined for - \".concat(method));\n        }\n\n        try {\n          parser[method].apply(null, other);\n        } catch (err) {\n          throw new Error(\"Error executing parser - \".concat(method, \" - \").concat(err.message));\n        }\n      } catch (err) {\n        if (parser.onError) {\n          parser.onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Error parsing message', err);\n        }\n      }\n    }\n  };\n  return parser;\n}","map":null,"metadata":{},"sourceType":"module"}