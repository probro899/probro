{"ast":null,"code":"import _classCallCheck from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/Column.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport NewTask from './NewTask';\n\nvar Column =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Column, _Component);\n\n  function Column() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Column);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Column)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tasks: []\n    };\n\n    _this.setTasksInState = function () {\n      var _this$props = _this.props,\n          database = _this$props.database,\n          columnId = _this$props.columnId;\n      var tasks = database.BoardColumnCard.allIds.filter(function (obj) {\n        if (database.BoardColumnCard.byId[obj].boardColumnId === columnId) {\n          return obj;\n        }\n      }).reduce(function (obj, e) {\n        obj.push(database.BoardColumnCard.byId[e]);\n        return obj;\n      }, []);\n      console.log('total tastks', tasks); // this.setState({\n      //   tasks,\n      // });\n    };\n\n    return _this;\n  }\n\n  _createClass(Column, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setTasksInState();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.setTasksInState();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          column = _this$props2.column,\n          columnId = _this$props2.columnId,\n          index = _this$props2.index;\n      var tasks = this.state.tasks;\n      return React.createElement(Draggable, {\n        draggableId: column.id,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(\"div\", Object.assign({\n          className: \"column-container\",\n          ref: provided.innerRef\n        }, provided.draggableProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"column-inner-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(\"div\", Object.assign({\n          className: \"column-title\"\n        }, provided.dragHandleProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, column.name)), React.createElement(Droppable, {\n          droppableId: column.id,\n          type: \"task\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, function (provided) {\n          return React.createElement(\"div\", Object.assign({\n            className: \"task-list\",\n            ref: provided.innerRef\n          }, provided.droppableProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }), tasks.map(function (task, index) {\n            return React.createElement(Task, {\n              key: task.id,\n              task: task,\n              index: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70\n              },\n              __self: this\n            });\n          }), provided.placeholder);\n        }), provided.placeholder, React.createElement(NewTask, {\n          columnId: column.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        })));\n      });\n    }\n  }]);\n\n  return Column;\n}(Component);\n\nColumn.propTypes = {\n  column: PropTypes.objectOf(PropTypes.any).isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.any).isRequired,\n  index: PropTypes.number.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nexport default connect(mapStateToProps)(Column);","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/common/ClassComponents/Column.js"],"names":["React","Component","PropTypes","connect","Droppable","Draggable","Task","NewTask","Column","state","tasks","setTasksInState","props","database","columnId","BoardColumnCard","allIds","filter","obj","byId","boardColumnId","reduce","e","push","console","log","column","index","id","provided","innerRef","draggableProps","dragHandleProps","name","droppableProps","map","task","placeholder","propTypes","objectOf","any","isRequired","arrayOf","number","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport NewTask from './NewTask';\n\nclass Column extends Component {\n  state = {\n    tasks: [],\n  };\n\n  componentWillMount() {\n    this.setTasksInState();\n  }\n\n  componentDidUpdate() {\n    this.setTasksInState();\n  }\n\n  setTasksInState = () => {\n    const { database, columnId } = this.props;\n    const tasks = database.BoardColumnCard.allIds.filter((obj) => {\n      if (database.BoardColumnCard.byId[obj].boardColumnId === columnId) {\n        return obj;\n      }\n    }).reduce((obj, e) => {\n      obj.push(database.BoardColumnCard.byId[e]);\n      return obj;\n    }, []);\n    console.log('total tastks', tasks);\n    // this.setState({\n    //   tasks,\n    // });\n  }\n\n  render() {\n    const { column, columnId, index } = this.props;\n    const { tasks } = this.state;\n    return (\n      <Draggable\n        draggableId={column.id}\n        index={index}\n      >\n        {provided => (\n          <div\n            className=\"column-container\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n          >\n            <div className=\"column-inner-container\">\n              <div\n                className=\"column-title\"\n                {...provided.dragHandleProps}\n              >\n                <span>\n                  {column.name}\n                </span>\n              </div>\n              <Droppable\n                droppableId={column.id}\n                type=\"task\"\n              >\n                {provided => (\n                  <div\n                    className=\"task-list\"\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    {tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n              {provided.placeholder}\n              <NewTask columnId={column.id} />\n            </div>\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nColumn.propTypes = {\n  column: PropTypes.objectOf(PropTypes.any).isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.any).isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = state => state;\nexport default connect(mapStateToProps)(Column);\n"]},"metadata":{},"sourceType":"module"}