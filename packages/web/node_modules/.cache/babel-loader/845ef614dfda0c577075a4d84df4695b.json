{"ast":null,"code":"import _classCallCheck from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bhagya/workspace/reactjs/projects/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/common/Input.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup, Icon, Label, Tooltip, Position } from '@blueprintjs/core';\n\nvar customIcon = function customIcon(icon, handleLockClick, hidden) {\n  if (icon.side === 'left') {\n    var leftIcon = React.createElement(Icon, {\n      onClick: handleLockClick,\n      icon: icon.name,\n      iconSize: Icon.SIZE_LARGE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    });\n    return {\n      leftIcon: leftIcon,\n      rightIcon: null\n    };\n  }\n\n  if (icon.side === 'right') {\n    var rightIcon = React.createElement(Tooltip, {\n      content: hidden === true ? 'show' : 'hide',\n      position: Position.RIGHT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      style: {\n        marginTop: 3,\n        marginRight: 5,\n        color: '#757575'\n      },\n      icon: icon.name,\n      onClick: handleLockClick,\n      iconSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n    return {\n      leftIcon: null,\n      rightIcon: rightIcon\n    };\n  }\n\n  return {\n    leftIcon: null,\n    rightIcon: null\n  };\n};\n\nvar CustomInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CustomInput, _React$Component);\n\n  function CustomInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hidden: false\n    };\n\n    _this.componentWillMount = function () {\n      var data = _this.props.data;\n\n      _this.setState({\n        hidden: data.hidden\n      });\n    };\n\n    _this.handleLockClick = function () {\n      var hidden = _this.state.hidden;\n\n      _this.setState({\n        hidden: !hidden\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomInput, [{\n    key: \"render\",\n    value: function render() {\n      var hidden = this.state.hidden;\n      var _this$props = this.props,\n          data = _this$props.data,\n          _onChange = _this$props.onChange,\n          value = _this$props.value;\n      var icons = {};\n\n      if (data.icon) {\n        icons = customIcon(data.icon, this.handleLockClick, hidden);\n      }\n\n      return React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"label-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, data.name), React.createElement(InputGroup, Object.assign({\n        onChange: function onChange(e) {\n          return _onChange(data.id, e.target.value);\n        },\n        value: value,\n        type: hidden ? 'password' : 'text',\n        leftIcon: icons.leftIcon,\n        rightElement: icons.rightIcon\n      }, data, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CustomInput;\n}(React.Component);\n\nCustomInput.defaultProps = {\n  value: ''\n};\nCustomInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default CustomInput;","map":{"version":3,"sources":["/home/bhagya/workspace/reactjs/projects/probro/packages/web/src/common/Input.js"],"names":["React","PropTypes","InputGroup","Icon","Label","Tooltip","Position","customIcon","icon","handleLockClick","hidden","side","leftIcon","name","SIZE_LARGE","rightIcon","RIGHT","marginTop","marginRight","color","CustomInput","state","componentWillMount","data","props","setState","onChange","value","icons","e","id","target","Component","defaultProps","propTypes","func","isRequired","string","objectOf","any"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,QAA3C,QAA2D,mBAA3D;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,eAAP,EAAwBC,MAAxB,EAAmC;AACpD,MAAIF,IAAI,CAACG,IAAL,KAAc,MAAlB,EAA0B;AACxB,QAAMC,QAAQ,GACZ,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAEH,eAAf;AAAgC,MAAA,IAAI,EAAED,IAAI,CAACK,IAA3C;AAAiD,MAAA,QAAQ,EAAEV,IAAI,CAACW,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGA,WAAQ;AACNF,MAAAA,QAAQ,EAARA,QADM;AAENG,MAAAA,SAAS,EAAE;AAFL,KAAR;AAID;;AACD,MAAIP,IAAI,CAACG,IAAL,KAAc,OAAlB,EAA2B;AACzB,QAAMI,SAAS,GACb,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEL,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,MAA7C;AAAqD,MAAA,QAAQ,EAAEJ,QAAQ,CAACU,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,CAAb;AAAgBC,QAAAA,WAAW,EAAE,CAA7B;AAAgCC,QAAAA,KAAK,EAAE;AAAvC,OADT;AAEE,MAAA,IAAI,EAAEX,IAAI,CAACK,IAFb;AAGE,MAAA,OAAO,EAAEJ,eAHX;AAIE,MAAA,QAAQ,EAAC,IAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUA,WACE;AAAEG,MAAAA,QAAQ,EAAE,IAAZ;AAAkBG,MAAAA,SAAS,EAATA;AAAlB,KADF;AAGD;;AACD,SAAQ;AAAEH,IAAAA,QAAQ,EAAE,IAAZ;AAAkBG,IAAAA,SAAS,EAAE;AAA7B,GAAR;AACD,CA1BD;;IA4BMK,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNX,MAAAA,MAAM,EAAE;AADF,K;;UAIRY,kB,GAAqB,YAAM;AAAA,UACjBC,IADiB,GACR,MAAKC,KADG,CACjBD,IADiB;;AAEzB,YAAKE,QAAL,CAAc;AAAEf,QAAAA,MAAM,EAAEa,IAAI,CAACb;AAAf,OAAd;AACD,K;;UAEDD,e,GAAkB,YAAM;AAAA,UACdC,MADc,GACH,MAAKW,KADF,CACdX,MADc;;AAEtB,YAAKe,QAAL,CAAc;AAAEf,QAAAA,MAAM,EAAE,CAACA;AAAX,OAAd;AACD,K;;;;;;;6BAEQ;AAAA,UACCA,MADD,GACY,KAAKW,KADjB,CACCX,MADD;AAAA,wBAE2B,KAAKc,KAFhC;AAAA,UAECD,IAFD,eAECA,IAFD;AAAA,UAEOG,SAFP,eAEOA,QAFP;AAAA,UAEiBC,KAFjB,eAEiBA,KAFjB;AAGP,UAAIC,KAAK,GAAG,EAAZ;;AACA,UAAIL,IAAI,CAACf,IAAT,EAAe;AACboB,QAAAA,KAAK,GAAGrB,UAAU,CAACgB,IAAI,CAACf,IAAN,EAAY,KAAKC,eAAjB,EAAkCC,MAAlC,CAAlB;AACD;;AACD,aACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8Ba,IAAI,CAACV,IAAnC,CADF,EAEE,oBAAC,UAAD;AACE,QAAA,QAAQ,EAAE,kBAAAgB,CAAC;AAAA,iBAAIH,SAAQ,CAACH,IAAI,CAACO,EAAN,EAAUD,CAAC,CAACE,MAAF,CAASJ,KAAnB,CAAZ;AAAA,SADb;AAEE,QAAA,KAAK,EAAEA,KAFT;AAGE,QAAA,IAAI,EAAEjB,MAAM,GAAG,UAAH,GAAgB,MAH9B;AAIE,QAAA,QAAQ,EAAEkB,KAAK,CAAChB,QAJlB;AAKE,QAAA,YAAY,EAAEgB,KAAK,CAACb;AALtB,SAMMQ,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAaD;;;;EAnCuBvB,KAAK,CAACgC,S;;AAqChCZ,WAAW,CAACa,YAAZ,GAA2B;AACzBN,EAAAA,KAAK,EAAE;AADkB,CAA3B;AAIAP,WAAW,CAACc,SAAZ,GAAwB;AACtBR,EAAAA,QAAQ,EAAEzB,SAAS,CAACkC,IAAV,CAAeC,UADH;AAEtBT,EAAAA,KAAK,EAAE1B,SAAS,CAACoC,MAFK;AAGtBd,EAAAA,IAAI,EAAEtB,SAAS,CAACqC,QAAV,CAAmBrC,SAAS,CAACsC,GAA7B,EAAkCH;AAHlB,CAAxB;AAMA,eAAehB,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup, Icon, Label, Tooltip, Position } from '@blueprintjs/core';\n\nconst customIcon = (icon, handleLockClick, hidden) => {\n  if (icon.side === 'left') {\n    const leftIcon = (\n      <Icon onClick={handleLockClick} icon={icon.name} iconSize={Icon.SIZE_LARGE} />\n    );\n    return ({\n      leftIcon,\n      rightIcon: null,\n    });\n  }\n  if (icon.side === 'right') {\n    const rightIcon = (\n      <Tooltip content={hidden === true ? 'show' : 'hide'} position={Position.RIGHT}>\n        <Icon\n          style={{ marginTop: 3, marginRight: 5, color: '#757575' }}\n          icon={icon.name}\n          onClick={handleLockClick}\n          iconSize=\"20\"\n        />\n      </Tooltip>\n    );\n    return (\n      { leftIcon: null, rightIcon }\n    );\n  }\n  return ({ leftIcon: null, rightIcon: null });\n};\n\nclass CustomInput extends React.Component {\n  state = {\n    hidden: false,\n  }\n\n  componentWillMount = () => {\n    const { data } = this.props;\n    this.setState({ hidden: data.hidden });\n  }\n\n  handleLockClick = () => {\n    const { hidden } = this.state;\n    this.setState({ hidden: !hidden });\n  }\n\n  render() {\n    const { hidden } = this.state;\n    const { data, onChange, value } = this.props;\n    let icons = {};\n    if (data.icon) {\n      icons = customIcon(data.icon, this.handleLockClick, hidden);\n    }\n    return (\n      <Label>\n        <span className=\"label-text\">{data.name}</span>\n        <InputGroup\n          onChange={e => onChange(data.id, e.target.value)}\n          value={value}\n          type={hidden ? 'password' : 'text'}\n          leftIcon={icons.leftIcon}\n          rightElement={icons.rightIcon}\n          {...data}\n        />\n      </Label>\n    );\n  }\n}\nCustomInput.defaultProps = {\n  value: '',\n};\n\nCustomInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}