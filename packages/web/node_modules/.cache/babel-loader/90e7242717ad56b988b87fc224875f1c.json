{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Nabin/workspace/probro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { updateFormValue } from '../index';\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n    var _getState, form, _form$login, userName, password, res, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(updateFormValue('login', {\n              loading: true\n            }));\n            _getState = getState(), form = _getState.form;\n            _form$login = form.login, userName = _form$login.userName, password = _form$login.password;\n            _context.prev = 3;\n            _context.next = 6;\n            return axios.post('http://localhost:4001/auth/login', {\n              userName: userName,\n              password: password\n            });\n\n          case 6:\n            res = _context.sent;\n            data = res.data;\n            console.log(data);\n\n            if (res.status === 200 && data.token) {\n              dispatch(updateFormValue('login', {\n                loading: false,\n                error: null,\n                success: true,\n                userName: '',\n                password: ''\n              }));\n              sessionStorage.setItem('USER_ID', data.id);\n              sessionStorage.setItem('SESSION_ID', data.token);\n              sessionStorage.setItem('USER_NAME', data.name);\n              sessionStorage.setItem('USER_TYPE', data.type);\n              dispatch(updateMainValue('screen', data.type));\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n            dispatch(updateFormValue('login', {\n              loading: false,\n              error: 'Invalid username/password'\n            }));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[3, 12]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/Nabin/workspace/probro/packages/web/src/actions/helper-functions/loginFormHandler.js"],"names":["axios","updateFormValue","dispatch","getState","loading","form","login","userName","password","post","res","data","console","log","status","token","error","success","sessionStorage","setItem","id","name","type","updateMainValue"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAAEG,cAAAA,OAAO,EAAE;AAAX,aAAV,CAAhB,CAAR;AADa,wBAEID,QAAQ,EAFZ,EAELE,IAFK,aAELA,IAFK;AAAA,0BAGkBA,IAAI,CAACC,KAHvB,EAGLC,QAHK,eAGLA,QAHK,EAGKC,QAHL,eAGKA,QAHL;AAAA;AAAA;AAAA,mBAKOR,KAAK,CAACS,IAAN,CAAW,kCAAX,EAA+C;AAAEF,cAAAA,QAAQ,EAARA,QAAF;AAAYC,cAAAA,QAAQ,EAARA;AAAZ,aAA/C,CALP;;AAAA;AAKLE,YAAAA,GALK;AAMHC,YAAAA,IANG,GAMMD,GANN,CAMHC,IANG;AAOXC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,gBAAID,GAAG,CAACI,MAAJ,KAAe,GAAf,IAAsBH,IAAI,CAACI,KAA/B,EAAsC;AACpCb,cAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAACG,gBAAAA,OAAO,EAAE,KAAV;AAAiBY,gBAAAA,KAAK,EAAE,IAAxB;AAA8BC,gBAAAA,OAAO,EAAE,IAAvC;AAA6CV,gBAAAA,QAAQ,EAAE,EAAvD;AAA2DC,gBAAAA,QAAQ,EAAE;AAArE,eAAV,CAAhB,CAAR;AACAU,cAAAA,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkCR,IAAI,CAACS,EAAvC;AACAF,cAAAA,cAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqCR,IAAI,CAACI,KAA1C;AACAG,cAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCR,IAAI,CAACU,IAAzC;AACAH,cAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCR,IAAI,CAACW,IAAzC;AACApB,cAAAA,QAAQ,CAACqB,eAAe,CAAC,QAAD,EAAWZ,IAAI,CAACW,IAAhB,CAAhB,CAAR;AACD;;AAfU;AAAA;;AAAA;AAAA;AAAA;AAiBXpB,YAAAA,QAAQ,CAACD,eAAe,CAAC,OAAD,EAAU;AAAEG,cAAAA,OAAO,EAAE,KAAX;AAAkBY,cAAAA,KAAK,EAAE;AAAzB,aAAV,CAAhB,CAAR;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport { updateFormValue } from '../index';\n\nexport default async (dispatch, getState) => {\n  dispatch(updateFormValue('login', { loading: true }));\n  const { form } = getState();\n  const { userName, password } = form.login;\n  try {\n    const res = await axios.post('http://localhost:4001/auth/login', { userName, password });\n    const { data } = res;\n    console.log(data);\n    if (res.status === 200 && data.token) {\n      dispatch(updateFormValue('login', {loading: false, error: null, success: true, userName: '', password: '' }));\n      sessionStorage.setItem('USER_ID', data.id);\n      sessionStorage.setItem('SESSION_ID', data.token);\n      sessionStorage.setItem('USER_NAME', data.name);\n      sessionStorage.setItem('USER_TYPE', data.type);\n      dispatch(updateMainValue('screen', data.type));\n    }\n  } catch {\n    dispatch(updateFormValue('login', { loading: false, error: 'Invalid username/password' }));\n  }\n  // console.log(res);\n};"]},"metadata":{},"sourceType":"module"}